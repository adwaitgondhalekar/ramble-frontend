import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:ramble/screens/search_screen.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'dart:convert'; // To parse JSON data
import 'post_screen.dart';
import 'profile_screen.dart';

class HomeScreen extends StatefulWidget {
  const HomeScreen({super.key, required String previousPage});

  @override
  _HomeScreenState createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  List<dynamic> posts = [];

  // Function to fetch posts from the backend server
  Future<void> fetchPosts() async {
    
    // Get the token from SharedPreferences
    final prefs = await SharedPreferences.getInstance();
    final token = prefs.getString('authToken'); // Assuming 'authToken' is the key used to store the token
    
    //uncomment the below code if you want to check without login everytime
    //paste the token generated by the backend here
    // const token = 'cd5c90a9cc046399795dc6e002a31eaa360f2eb8';
    // debugPrint("token :${token}");

    final response = await http.get(Uri.parse('http://10.0.2.2:8000/feed/'), 
      headers: {
        'Content-Type': 'application/json; charset=UTF-8',
        'Accept': 'application/json',
        'Authorization': 'Token $token',
      }
    );

    if (response.statusCode == 200) {
      final data = jsonDecode(response.body); // Parse the JSON response
      setState(() {
        posts = data; // Store the posts in the state
      });
    } else {
      throw Exception('Failed to load posts');
    }
    }

  @override
  void initState() {
    super.initState();
    fetchPosts(); // Fetch posts when the screen loads
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: const Color(0xFF2C4B69), // AppBar color
        leading: const Padding(
          padding: EdgeInsets.all(8.0),
          child: CircleAvatar(
            backgroundColor: Colors.white, // User profile placeholder
            backgroundImage: NetworkImage('https://picsum.photos/seed/picsum/200/300'), // Replace with actual URL
            child: Icon(Icons.person, color: Color(0xFF2C4B69)), // Replace with network image for profile pic
          ),
        ),
        title: const Text('ramble'),
        centerTitle: true,
        actions: [
          IconButton(
            icon: const Icon(Icons.refresh, color: Colors.white),
            onPressed: () {
              fetchPosts(); // Logic to refresh posts
            },
          ),
        ],
      ),
      body: posts.isEmpty
          ? const Center(child: CircularProgressIndicator()) // Show loading indicator
          : ListView.builder(
              itemCount: posts.length,
              itemBuilder: (context, index) {
                return buildPostCard(posts[index]);
              },
            ),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          // Navigate to Post Screen
          Navigator.push(
            context,
            MaterialPageRoute(builder: (context) => PostScreen()),
          );
        },
        backgroundColor: const Color(0xFF2C4B69), // Floating action button color
        foregroundColor: Colors.white,
        child: const Icon(Icons.add),
      ),
      bottomNavigationBar: BottomNavigationBar(
        backgroundColor: const Color(0xFF2C4B69),
        type: BottomNavigationBarType.fixed,
        selectedItemColor: Colors.white,
        // unselectedItemColor: Colors.white70,
        showSelectedLabels: true,
        showUnselectedLabels: true,
        items: const [
          BottomNavigationBarItem(
            icon: Icon(Icons.home),
            label: 'Home',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.search),
            label: 'Search',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.person),
            label: 'Profile',
          ),
        ],
        onTap: (index) {
          if (index == 0) {
            // Already on HomeScreen
          }
          else if (index ==1) {
            //Navigate to SearchScreen
            Navigator.push(
              context,
              MaterialPageRoute(builder: (context) => const SearchScreen(previousPage: 'home')),
            );
          } 
          else if (index == 2) {
            // Navigate to ProfileScreen
            Navigator.push(
              context,
              MaterialPageRoute(builder: (context) => const ProfileScreen(previousPage: 'home')),
            );
          }
        },
      ),
    );
  }

  // Post Card widget
  Widget buildPostCard(Map<String, dynamic> postData) {
    return Card(
      margin: const EdgeInsets.symmetric(vertical: 8, horizontal: 16),
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Row(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            CircleAvatar(
              radius: 24,
              backgroundColor: Colors.grey[200],
              child: const Icon(Icons.person, color: Color(0xFF2C4B69)), // Placeholder for profile picture
            ),
            const SizedBox(width: 16),
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween, // To align username and time
                    children: [
                      Text(
                        postData['user'], // Display the username
                        style: const TextStyle(fontWeight: FontWeight.bold),
                      ),
                      Text(
                        postData['timestamp'], // Display the timestamp
                        style: const TextStyle(color: Colors.grey, fontSize: 12),
                      ),
                    ],
                  ),
                  const SizedBox(height: 8),
                  Text(
                    postData['text'], // Display the post content
                    style: const TextStyle(fontSize: 16),
                  ),
                  const SizedBox(height: 8),
                  Row(
                    children: [
                      const Icon(Icons.thumb_up, size: 16, color: Colors.grey),
                      const SizedBox(width: 4),
                      Text(
                        postData['likes'].toString(), // Display the number of likes
                        style: const TextStyle(color: Colors.grey),
                      ),
                    ],
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }
}
