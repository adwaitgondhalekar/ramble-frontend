This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-11-25T18:42:18.092Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
lib/
  screens/
    create_post_screen.dart
    edit_profile_screen.dart
    home_screen.dart
    login_screen.dart
    post_screen.dart
    profile_screen.dart
    search_screen.dart
    signup_screen.dart
  widgets/
    custom_bottom_navbar.dart
  main.dart
  service_urls.dart
test/
  unit/
    login_test.dart
    signup_test.dart
  widget/
    login_widget_test.dart
    signup_widget_test.dart
.gitignore
.metadata
analysis_options.yaml
login_unit_test_results.tex
login_widget_test_results.tex
pubspec.lock
pubspec.yaml
README.md
signup_unit_test_results.tex
signup_widget_test_results.tex
test_results.tex

================================================================
Repository Files
================================================================

================
File: lib/screens/create_post_screen.dart
================
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:shared_preferences/shared_preferences.dart';
import 'package:google_fonts/google_fonts.dart';
import 'dart:convert';
import 'package:ramble/service_urls.dart';

class CreatePostScreen extends StatefulWidget {
  const CreatePostScreen({super.key});

  @override
  _CreatePostScreenState createState() => _CreatePostScreenState();
}

class _CreatePostScreenState extends State<CreatePostScreen> {
  final TextEditingController _postController = TextEditingController();
  final int _maxPostLength = 256; // Matches the Post model constraint.
  bool _isSubmitting = false;

  Future<void> _submitPost() async {
    if (_postController.text.trim().isEmpty) {
      _showErrorSnackbar('Post content cannot be empty.');
      return;
    }

    setState(() => _isSubmitting = true);

    try {
      final prefs = await SharedPreferences.getInstance();
      final token = prefs.getString('authToken');

      final response = await http.post(
        Uri.parse('${POST_SERVICE_URL}post/'),
        headers: {
          'Content-Type': 'application/json; charset=UTF-8',
          'Authorization': 'Bearer $token',
        },
        body: jsonEncode({
          "text": _postController.text.trim(),
        }),
      );

      if (response.statusCode == 201) {
        _showSuccessSnackbar('Post created successfully.');
        Navigator.pop(context, true); // Return success to refresh feed.
      } else {
        final responseData = jsonDecode(response.body);
        _showErrorSnackbar(responseData['error'] ?? 'Failed to create post.');
      }
    } catch (e) {
      _showErrorSnackbar('An error occurred while creating the post.');
    } finally {
      setState(() => _isSubmitting = false);
    }
  }

  void _showErrorSnackbar(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message, style: const TextStyle(color: Colors.white)),
        backgroundColor: Colors.red,
        duration: const Duration(seconds: 3),
      ),
    );
  }

  void _showSuccessSnackbar(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message, style: const TextStyle(color: Colors.white)),
        backgroundColor: Colors.green,
        duration: const Duration(seconds: 3),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor:
          const Color.fromRGBO(62, 110, 162, 1), // Consistent background color
      appBar: AppBar(
        leading: IconButton(
          icon: const Icon(Icons.arrow_back,
              color: Colors.white), // White back button
          onPressed: () => Navigator.pop(context),
        ),
        title: Text(
          'Create Post',
          style: GoogleFonts.yaldevi(
            textStyle: const TextStyle(
              fontSize: 24,
              fontWeight: FontWeight.bold,
              color: Colors.white,
            ),
          ),
        ),
        backgroundColor: const Color.fromRGBO(62, 110, 162, 1),
        elevation: 0, // Matches the flat app bar style
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            TextField(
              controller: _postController,
              maxLength: _maxPostLength, // Specifies the max character limit
              maxLines:
                  null, // Allows the text field to grow vertically as needed
              decoration: InputDecoration(
                labelText: 'Write your post here...',
                labelStyle: GoogleFonts.yaldevi(
                  textStyle: const TextStyle(
                    fontSize: 16,
                    fontWeight: FontWeight.bold,
                    color: Colors.white70, // Label text color
                  ),
                ),
                border: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(12.0),
                ),
                focusedBorder: OutlineInputBorder(
                  borderSide: const BorderSide(
                    color: Color.fromRGBO(62, 110, 162, 1),
                  ),
                ),
              ),
              style: const TextStyle(
                color: Colors.white, // Text color inside the field
              ),
              cursorColor: Colors.white, // Cursor color
              textAlign: TextAlign.start, // Aligns text to the start
              buildCounter: (BuildContext context,
                  {int? currentLength, int? maxLength, bool? isFocused}) {
                return Text(
                  '$currentLength/$maxLength',
                  style: const TextStyle(
                    color: Colors.white, // Counter text color
                    fontSize: 12,
                  ),
                );
              },
            ),
            const SizedBox(height: 16),
            _isSubmitting
                ? const Center(
                    child: CircularProgressIndicator(
                      color: Colors.white,
                    ),
                  )
                : SizedBox(
                    width: double.infinity,
                    child: ElevatedButton(
                      onPressed: _submitPost,
                      style: ElevatedButton.styleFrom(
                        backgroundColor: const Color.fromRGBO(
                            0, 174, 240, 1), // Button background
                        padding: const EdgeInsets.symmetric(vertical: 14.0),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(12),
                        ),
                      ),
                      child: Text(
                        'Submit Post',
                        style: GoogleFonts.yaldevi(
                          textStyle: const TextStyle(
                            fontSize: 16,
                            fontWeight: FontWeight.bold,
                            color: Colors.white,
                          ),
                        ),
                      ),
                    ),
                  ),
          ],
        ),
      ),
    );
  }
}

================
File: lib/screens/edit_profile_screen.dart
================
import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:http/http.dart' as http;
import 'package:shared_preferences/shared_preferences.dart';
import 'package:ramble/service_urls.dart';

class EditProfileScreen extends StatefulWidget {
  const EditProfileScreen({Key? key}) : super(key: key);

  @override
  _EditProfileScreenState createState() => _EditProfileScreenState();
}

class _EditProfileScreenState extends State<EditProfileScreen> {
  final GlobalKey<FormState> _formKey = GlobalKey<FormState>();
  final TextEditingController _usernameController = TextEditingController();
  final TextEditingController _bioController = TextEditingController();

  String? _originalUsername;
  String? _originalBio;
  String? _errorMessage;
  bool _isSaving = false;
  bool _hasChanges = false;

  @override
  void initState() {
    super.initState();
    _loadProfileData();
    _addListeners();
  }

  @override
  void dispose() {
    _usernameController.dispose();
    _bioController.dispose();
    super.dispose();
  }

  void _addListeners() {
    _usernameController.addListener(_checkForChanges);
    _bioController.addListener(_checkForChanges);
  }

  Future<void> _loadProfileData() async {
    setState(() {
      _isSaving = true;
    });

    final prefs = await SharedPreferences.getInstance();
    final token = prefs.getString('authToken');

    try {
      final response = await http.get(
        Uri.parse('${USER_SERVICE_URL}profile/'),
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer $token',
        },
      );

      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        setState(() {
          _originalUsername = data['username'] ?? '';
          _originalBio = data['bio'] ?? '';
          _usernameController.text = _originalUsername!;
          _bioController.text = _originalBio!;
          _hasChanges = false; // No changes initially
        });
      } else {
        _showErrorSnackbar('Failed to load profile data.');
      }
    } catch (e) {
      _showErrorSnackbar('An error occurred while loading profile data.');
    } finally {
      setState(() {
        _isSaving = false;
      });
    }
  }

  void _checkForChanges() {
    final usernameChanged = _usernameController.text != _originalUsername;
    final bioChanged = _bioController.text != _originalBio;

    setState(() {
      _hasChanges = usernameChanged || bioChanged;
    });
  }

  Future<void> _saveChanges() async {
    if (!_formKey.currentState!.validate()) return;

    setState(() {
      _isSaving = true;
      _errorMessage = null;
    });

    final prefs = await SharedPreferences.getInstance();
    final token = prefs.getString('authToken');

    // Prepare data to send
    final Map<String, dynamic> updatedData = {};

    if (_usernameController.text != _originalUsername) {
      updatedData['user'] = {'username': _usernameController.text};
    }

    if (_bioController.text != _originalBio) {
      updatedData['bio'] = _bioController.text;
    }

    try {
      final response = await http.patch(
        Uri.parse('${USER_SERVICE_URL}profile/edit/'),
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer $token',
        },
        body: jsonEncode(updatedData),
      );

      if (response.statusCode == 200) {
        // Update local data
        if (_usernameController.text != _originalUsername) {
          await prefs.setString('username', _usernameController.text);
        }
        if (_bioController.text != _originalBio) {
          await prefs.setString('bio', _bioController.text);
        }

        if (mounted) {
          Navigator.pop(context, true); // Notify success
        }
      } else if (response.statusCode == 400) {
        final errorResponse = json.decode(response.body);
        if (errorResponse['user']?['username'] != null) {
          _showErrorSnackbar(
              errorResponse['user']['username'][0]); // Username error
        } else {
          _showErrorSnackbar('Failed to save changes. Please try again.');
        }
      } else {
        _showErrorSnackbar('An unexpected error occurred. Please try again.');
      }
    } catch (e) {
      _showErrorSnackbar('Network error. Please check your connection.');
    } finally {
      setState(() {
        _isSaving = false;
      });
    }
  }

  void _showErrorSnackbar(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message, style: const TextStyle(color: Colors.white)),
        backgroundColor: Colors.red,
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color.fromRGBO(62, 110, 162, 1),
      appBar: AppBar(
        iconTheme: const IconThemeData(color: Colors.white),
        backgroundColor: const Color.fromRGBO(62, 110, 162, 1),
        title: Text(
          'Edit Profile',
          style: GoogleFonts.yaldevi(
            textStyle: const TextStyle(
              fontSize: 24,
              fontWeight: FontWeight.bold,
              color: Colors.white,
            ),
          ),
        ),
        centerTitle: true,
      ),
      body: _isSaving
          ? const Center(child: CircularProgressIndicator(color: Colors.white))
          : Padding(
              padding: const EdgeInsets.all(16.0),
              child: Form(
                key: _formKey,
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    _buildTextField(
                      label: 'Username',
                      controller: _usernameController,
                      hintText: 'Enter your username',
                      validator: (value) {
                        if (value == null || value.trim().isEmpty) {
                          return 'Username cannot be empty';
                        } else if (value.contains(' ')) {
                          return 'Username cannot contain spaces';
                        }
                        return null;
                      },
                    ),
                    const SizedBox(height: 20),
                    _buildTextField(
                      label: 'Bio',
                      controller: _bioController,
                      hintText: 'Enter your bio (max 50 characters)',
                      maxLines: 3,
                      validator: (value) {
                        if (value != null && value.length > 50) {
                          return 'Bio cannot exceed 50 characters';
                        }
                        return null;
                      },
                    ),
                    const SizedBox(height: 20),
                    if (_errorMessage != null)
                      Padding(
                        padding: const EdgeInsets.only(bottom: 10.0),
                        child: Text(
                          _errorMessage!,
                          style: const TextStyle(color: Colors.red),
                        ),
                      ),
                    ElevatedButton(
                      onPressed: _hasChanges ? _saveChanges : null,
                      style: ElevatedButton.styleFrom(
                        backgroundColor: _hasChanges
                            ? const Color.fromRGBO(0, 174, 240, 1)
                            : Colors.grey,
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(20),
                        ),
                        minimumSize: const Size(double.infinity, 50),
                      ),
                      child: const Text(
                        'Save Changes',
                        style: TextStyle(color: Colors.white, fontSize: 18),
                      ),
                    ),
                  ],
                ),
              ),
            ),
    );
  }

  Widget _buildTextField({
    required String label,
    required TextEditingController controller,
    String? hintText,
    int maxLines = 1,
    String? Function(String?)? validator,
  }) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          label,
          style: GoogleFonts.yaldevi(
            textStyle: const TextStyle(
              fontSize: 18,
              fontWeight: FontWeight.bold,
              color: Colors.white,
            ),
          ),
        ),
        const SizedBox(height: 10),
        TextFormField(
          controller: controller,
          maxLines: maxLines,
          style: const TextStyle(color: Colors.white),
          decoration: InputDecoration(
            hintText: hintText,
            hintStyle: const TextStyle(color: Colors.white70),
            filled: true,
            fillColor: const Color.fromRGBO(0, 0, 0, 0.1),
            border: OutlineInputBorder(
              borderRadius: BorderRadius.circular(10),
              borderSide: BorderSide.none,
            ),
          ),
          validator: validator,
        ),
      ],
    );
  }
}

================
File: lib/screens/home_screen.dart
================
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:google_fonts/google_fonts.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'dart:convert';
import 'package:intl/intl.dart';
import 'profile_screen.dart';
import 'search_screen.dart';
import 'package:ramble/service_urls.dart';
import 'package:ramble/screens/login_screen.dart';
import 'package:ramble/widgets/custom_bottom_navbar.dart';
import 'package:ramble/screens/create_post_screen.dart';

class HomeScreen extends StatefulWidget {
  final String previousPage;
  final http.Client? httpClient; // For dependency injection in tests

  const HomeScreen({
    super.key, 
    required this.previousPage,
    this.httpClient
  });

  @override
  HomeScreenState createState() => HomeScreenState();
}

class HomeScreenState extends State<HomeScreen> { 
  late http.Client _client;
  List<dynamic> posts = [];
  bool isLoading = true;
  bool isFetching = false;
  bool hasFetchedPosts = false;

  @override
  void initState() {
    super.initState();
    _client = widget.httpClient ?? http.Client();
    fetchPosts();
  }

  @override
  void dispose() {
    if (widget.httpClient == null) {
      _client.close();
    }
    super.dispose();
  }

  Future<List<dynamic>> fetchPosts({bool isRefresh = false}) async {
    if (isFetching) return posts;

    setState(() {
      isFetching = true;
      if (isRefresh) posts = [];
    });

    try {
      final prefs = await SharedPreferences.getInstance();
      final token = prefs.getString('authToken');
      final userId = prefs.getInt('userId');

      final response = await _client.get(
        Uri.parse('${POST_SERVICE_URL}feed/'),
        headers: {
          'Content-Type': 'application/json; charset=UTF-8',
          'Authorization': 'Bearer $token',
        },
      );

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        final updatedPosts = (data as List).map((post) {
          post['isLiked'] = (post['likedBy'] as List<dynamic>).contains(userId);
          return post;
        }).toList();

        updatedPosts.sort((a, b) => DateTime.parse(b['timestamp'])
            .compareTo(DateTime.parse(a['timestamp'])));

        setState(() {
          posts = updatedPosts;
          hasFetchedPosts = true;
          isLoading = false;
        });
        return posts;
      } else {
        showErrorSnackbar('Failed to load posts. Status code: ${response.statusCode}');
        return [];
      }
    } catch (e) {
      showErrorSnackbar('An error occurred while fetching posts.');
      return [];
    } finally {
      setState(() => isFetching = false);
    }
  }

  void showErrorSnackbar(String message) {
    if (!mounted) return;
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        key: const Key('errorSnackbar'),
        content: Text(message, style: const TextStyle(color: Colors.white)),
        backgroundColor: Colors.red,
        duration: const Duration(seconds: 3),
      ),
    );
  }

  Future<bool> likePost(Map<String, dynamic> post) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final token = prefs.getString('authToken');

      final response = await _client.patch(
        Uri.parse('${POST_SERVICE_URL}post/${post['id']}/'),
        headers: {
          'Content-Type': 'application/json; charset=UTF-8',
          'Authorization': 'Bearer $token',
        },
        body: jsonEncode({
          "action": "like",
        }),
      );

      if (response.statusCode == 200) {
        if (mounted) {
          setState(() {
            post['isLiked'] = true;
            post['likes'] += 1;
          });
        }
        return true;
      } else {
        showErrorSnackbar('Failed to like the post.');
        return false;
      }
    } catch (e) {
      showErrorSnackbar('An error occurred while liking the post.');
      return false;
    }
  }

  Future<bool> unlikePost(Map<String, dynamic> post) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final token = prefs.getString('authToken');

      final response = await _client.patch(
        Uri.parse('${POST_SERVICE_URL}post/${post['id']}/'),
        headers: {
          'Content-Type': 'application/json; charset=UTF-8',
          'Authorization': 'Bearer $token',
        },
        body: jsonEncode({
          "action": "unlike",
        }),
      );

      if (response.statusCode == 200) {
        if (mounted) {
          setState(() {
            post['isLiked'] = false;
            post['likes'] -= 1;
          });
        }
        return true;
      } else {
        showErrorSnackbar('Failed to unlike the post.');
        return false;
      }
    } catch (e) {
      showErrorSnackbar('An error occurred while unliking the post.');
      return false;
    }
  }

  Future<void> handleLogout() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.clear();
    if (!mounted) return;
    Navigator.pushReplacement(
      context,
      MaterialPageRoute(builder: (context) => const Login())
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      key: const Key('homeScreen'),
      backgroundColor: const Color.fromRGBO(62, 110, 162, 1),
      appBar: PreferredSize(
        preferredSize: const Size.fromHeight(57.0),
        child: Material(
          color: const Color.fromRGBO(62, 110, 162, 1),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              AppBar(
                key: const Key('homeAppBar'),
                iconTheme: const IconThemeData(color: Colors.white),
                backgroundColor: const Color.fromRGBO(62, 110, 162, 1),
                title: Text(
                  'Ramble',
                  style: GoogleFonts.yaldevi(
                    textStyle: const TextStyle(
                      fontSize: 24,
                      fontWeight: FontWeight.bold,
                      color: Colors.white,
                    ),
                  ),
                ),
                centerTitle: true,
              ),
              Container(
                height: 1,
                color: Colors.white.withOpacity(0.5),
              ),
            ],
          ),
        ),
      ),
      drawer: buildDrawer(),
      body: isLoading
          ? const Center(
              child: CircularProgressIndicator(
                key: Key('loadingIndicator'),
                color: Colors.white
              )
            )
          : RefreshIndicator(
              key: const Key('refreshIndicator'),
              backgroundColor: const Color.fromRGBO(0, 174, 240, 1),
              color: Colors.white,
              onRefresh: () => fetchPosts(isRefresh: true),
              child: hasFetchedPosts && posts.isEmpty
                  ? buildEmptyFeed()
                  : buildPostList(),
            ),
      floatingActionButton: FloatingActionButton(
        key: const Key('createPostButton'),
        shape: const CircleBorder(),
        onPressed: () => navigateToCreatePost(),
        backgroundColor: const Color.fromRGBO(0, 174, 240, 1),
        child: const Icon(
          Icons.add,
          color: Colors.white,
        ),
      ),
      bottomNavigationBar: CustomBottomNavBar(
        key: const Key('bottomNavBar'),
        currentIndex: 0,
        onTap: handleNavigation,
      ),
    );
  }

  Future<void> navigateToCreatePost() async {
    final postCreated = await Navigator.push(
      context,
      MaterialPageRoute(builder: (context) => const CreatePostScreen()),
    );

    if (postCreated == true) {
      await fetchPosts(isRefresh: true);
    }
  }

  void handleNavigation(int index) {
    if (!mounted) return;
    
    if (index == 1) {
      Navigator.pushReplacement(
        context,
        MaterialPageRoute(
          builder: (context) => const SearchScreen(previousPage: 'home'),
        ),
      );
    } else if (index == 2) {
      Navigator.pushReplacement(
        context,
        MaterialPageRoute(
          builder: (context) => const ProfileScreen(previousPage: 'home'),
        ),
      );
    }
  }

  Widget buildDrawer() {
    return Drawer(
      key: const Key('drawer'),
      child: ListView(
        children: [
          DrawerHeader(
            decoration: const BoxDecoration(
              color: Color.fromRGBO(62, 110, 162, 1)
            ),
            child: Center(
              child: Text(
                'Ramble',
                style: GoogleFonts.yaldevi(
                  textStyle: const TextStyle(
                    fontSize: 50,
                    fontWeight: FontWeight.bold,
                    color: Colors.white,
                  ),
                ),
              ),
            ),
          ),
          ListTile(
            key: const Key('logoutButton'),
            leading: const Icon(Icons.logout),
            title: Text(
              'Logout',
              style: GoogleFonts.yaldevi(fontWeight: FontWeight.bold),
            ),
            onTap: handleLogout,
          ),
        ],
      ),
    );
  }

  Widget buildEmptyFeed() {
    return Center(
      key: const Key('emptyFeedMessage'),
      child: Padding(
        padding: const EdgeInsets.all(20.0),
        child: Text(
          'No posts to display. Create your first post or follow users to see their content!',
          textAlign: TextAlign.center,
          style: GoogleFonts.yaldevi(
            textStyle: const TextStyle(
              fontSize: 18,
              fontWeight: FontWeight.bold,
              color: Colors.white,
            ),
          ),
        ),
      ),
    );
  }

  Widget buildPostList() {
    return ListView.builder(
      key: const Key('postList'),
      itemCount: posts.length,
      itemBuilder: (context, index) => buildPostCard(posts[index]),
    );
  }

  Widget buildPostCard(Map<String, dynamic> post) {
    final formattedDate = DateFormat('MMM d, yyyy, h:mm a')
        .format(DateTime.parse(post['timestamp']).toLocal());

    return Card(
      key: Key('postCard_${post['id']}'),
      margin: const EdgeInsets.symmetric(vertical: 8, horizontal: 16),
      color: Colors.white,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(15),
      ),
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                CircleAvatar(
                  radius: 24,
                  backgroundColor: Colors.grey[200],
                  child: const Icon(Icons.person, color: Color(0xFF2C4B69)),
                ),
                const SizedBox(width: 16),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Row(
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          Text(
                            post['username'] ?? 'Anonymous',
                            key: Key('username_${post['id']}'),
                            style: GoogleFonts.yaldevi(
                              textStyle: const TextStyle(
                                fontSize: 16,
                                fontWeight: FontWeight.bold,
                                color: Colors.black,
                              ),
                            ),
                          ),
                          Text(
                            formattedDate,
                            key: Key('timestamp_${post['id']}'),
                            style: GoogleFonts.yaldevi(
                              textStyle: const TextStyle(
                                fontSize: 12,
                                color: Colors.grey,
                              ),
                            ),
                          ),
                        ],
                      ),
                      const SizedBox(height: 8),
                      Text(
                        post['text'] ?? '',
                        key: Key('postText_${post['id']}'),
                        style: GoogleFonts.yaldevi(
                          textStyle: const TextStyle(
                            fontSize: 14,
                            color: Colors.black,
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              ],
            ),
            const SizedBox(height: 8),
            Row(
              children: [
                GestureDetector(
                  key: Key('likeButton_${post['id']}'),
                  onTap: () async {
                    if (post['isLiked'] == true) {
                      await unlikePost(post);
                    } else {
                      await likePost(post);
                    }
                  },
                  child: Icon(
                    post['isLiked'] == true
                        ? Icons.thumb_up
                        : Icons.thumb_up_outlined,
                    size: 20,
                    color: post['isLiked'] == true ? Colors.blue : Colors.grey,
                  ),
                ),
                const SizedBox(width: 8),
                Text(
                  post['likes'].toString(),
                  key: Key('likeCount_${post['id']}'),
                  style: GoogleFonts.yaldevi(
                    textStyle: const TextStyle(
                      fontSize: 12,
                      color: Colors.grey,
                    ),
                  ),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }
}

================
File: lib/screens/login_screen.dart
================
import 'dart:convert';
import 'package:flutter/gestures.dart';
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:http/http.dart' as http;
import 'package:shared_preferences/shared_preferences.dart';
import 'package:ramble/screens/home_screen.dart';
import 'signup_screen.dart';
import 'package:ramble/service_urls.dart';

class Login extends StatefulWidget {
  const Login({super.key});

  @override
  LoginState createState() => LoginState();
}

class LoginState extends State<Login> {
  final GlobalKey<FormState> _formKey = GlobalKey<FormState>();
  bool passwordVisible = true;  // Initial password visibility (hidden)
  final RegExp usernameRegExp = RegExp(r'^(?=.{3,15}$)(?![_])[a-zA-Z0-9_]+(?<![_])$');

  String? userName;
  String? password;

  @override
  void initState() {
    super.initState();
  }

  String? validateUserName(String? value) {
    if (value == null || value.isEmpty) {
      return 'Please enter a username';
    } else if (!usernameRegExp.hasMatch(value)) {
      return 'Please enter a valid username';
    }
    return null;
  }

  String? validatePassword(String? value) {
    if (value == null || value.isEmpty) {
      return 'Please enter your password';
    }
    return null;
  }

  Future<void> loginUser(String username, String password) async {
    final url = Uri.parse('${USER_SERVICE_URL}login/');

    // Ensure the keyboard is dismissed
    FocusScope.of(context).unfocus();

    // Loading Snackbar
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        key: Key('loadingSnackBar'),
        behavior: SnackBarBehavior.floating,
        backgroundColor: Color.fromRGBO(0, 174, 240, 1),
        content: Row(
          children: [
            CircularProgressIndicator(
              key: Key('loadingIndicator'),
              color: Colors.white
            ),
            SizedBox(width: 10),
            Expanded(
              child: Text(
                'Logging in...',
                key: Key('loadingText'),
                style: TextStyle(color: Colors.white),
              ),
            ),
          ],
        ),
        duration: Duration(seconds: 3),
      ),
    );

    try {
      final response = await http.post(
        url,
        headers: {'Content-Type': 'application/json'},
        body: json.encode({"username": username, "password": password}),
      );

      // Hide the loading Snackbar
      ScaffoldMessenger.of(context).hideCurrentSnackBar();

      if (response.statusCode == 200) {
        // Login success
        String token = json.decode(response.body)['access'];
        int userid = json.decode(response.body)['user-data']['id'];
        String first_name = json.decode(response.body)['user-data']['user']['first_name'];
        String last_name = json.decode(response.body)['user-data']['user']['last_name'];
        String bio = json.decode(response.body)['user-data']['bio'];

        // Save token in SharedPreferences
        SharedPreferences prefs = await SharedPreferences.getInstance();
        await prefs.setString('authToken', token);
        await prefs.setBool('isLoggedIn', true);

        // Success Snackbar
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            key: Key('successSnackBar'),
            behavior: SnackBarBehavior.floating,
            content: Row(
              children: [
                Icon(Icons.check_circle, color: Colors.white),
                SizedBox(width: 10),
                Expanded(
                  child: Text(
                    'Login successful!',
                    style: TextStyle(color: Colors.white),
                  ),
                ),
              ],
            ),
            backgroundColor: Colors.green,
            duration: Duration(seconds: 2),
          ),
        );

        // Navigate to the home screen after a short delay
        Future.delayed(const Duration(seconds: 2), () {
          Navigator.pushReplacement(
            context,
            MaterialPageRoute(
              builder: (context) => const HomeScreen(previousPage: 'home')
            ),
          );
        });
      } else if (response.statusCode == 400) {
        String errorMessage = json.decode(response.body)['error'] ?? 'Invalid username or password';

        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            key: const Key('errorSnackBar'),
            behavior: SnackBarBehavior.floating,
            content: Row(
              children: [
                const Icon(Icons.error, color: Colors.white),
                const SizedBox(width: 10),
                Expanded(
                  child: Text(
                    'Login failed: $errorMessage',
                    style: const TextStyle(color: Colors.white),
                  ),
                ),
              ],
            ),
            backgroundColor: Colors.redAccent,
            duration: const Duration(seconds: 3),
          ),
        );
      } else {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            key: const Key('serverErrorSnackBar'),
            behavior: SnackBarBehavior.floating,
            content: Row(
              children: [
                const Icon(Icons.error_outline, color: Colors.white),
                const SizedBox(width: 10),
                Expanded(
                  child: Text(
                    'An unexpected error occurred. Status code: ${response.statusCode}',
                    style: const TextStyle(color: Colors.white),
                  ),
                ),
              ],
            ),
            backgroundColor: Colors.red,
            duration: const Duration(seconds: 3),
          ),
        );
      }
    } catch (e) {
      ScaffoldMessenger.of(context).hideCurrentSnackBar();
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          key: Key('networkErrorSnackBar'),
          behavior: SnackBarBehavior.floating,
          content: Row(
            children: [
              Icon(Icons.error_outline, color: Colors.white),
              SizedBox(width: 10),
              Expanded(
                child: Text(
                  'Network error. Please try again.',
                  style: TextStyle(color: Colors.white),
                ),
              ),
            ],
          ),
          backgroundColor: Colors.red,
          duration: Duration(seconds: 3),
        ),
      );
      print('Error: $e');
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      key: const Key('loginScreen'),
      backgroundColor: const Color.fromRGBO(62, 110, 162, 1),
      body: SingleChildScrollView(
        physics: const ClampingScrollPhysics(),
        child: Form(
          key: _formKey,
          autovalidateMode: AutovalidateMode.onUserInteraction,
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.center,
            children: [
              Padding(
                padding: const EdgeInsets.fromLTRB(51, 60, 51, 50),
                child: Container(
                  key: const Key('titleContainer'),
                  alignment: Alignment.center,
                  constraints: const BoxConstraints(minWidth: 300, minHeight: 100),
                  child: Text(
                    'Ramble',
                    style: GoogleFonts.yaldevi(
                      textStyle: const TextStyle(
                        fontSize: 64,
                        fontWeight: FontWeight.bold,
                        color: Colors.white,
                      ),
                    ),
                  ),
                ),
              ),
              _buildTextField(
                key: 'username',
                hintText: 'Username',
                helperText: ' ',
                validator: validateUserName,
                onChanged: (value) => userName = value,
                obscureText: false,
              ),
              _buildTextField(
                key: 'password',
                hintText: 'Password',
                helperText: ' ',
                validator: validatePassword,
                onChanged: (value) => password = value,
                obscureText: passwordVisible,
                suffixIcon: IconButton(
                  key: const Key('passwordVisibilityToggle'),
                  onPressed: () {
                    setState(() {
                      passwordVisible = !passwordVisible;
                    });
                  },
                  icon: Icon(
                    passwordVisible ? Icons.visibility_off : Icons.visibility,
                    key: Key(passwordVisible ? 'visibilityOffIcon' : 'visibilityIcon'),
                  ),
                ),
              ),
              const Padding(padding: EdgeInsets.only(top: 50)),
              ElevatedButton(
                key: const Key('loginButton'),
                onPressed: () {
                  if (_formKey.currentState?.validate() ?? false) {
                    FocusScope.of(context).unfocus();
                    loginUser(userName!, password!);
                  }
                },
                style: ElevatedButton.styleFrom(
                  backgroundColor: const Color.fromRGBO(0, 174, 240, 1),
                  minimumSize: const Size(150, 45),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(50),
                  ),
                ),
                child: Text(
                  'Login',
                  style: GoogleFonts.yaldevi(
                    textStyle: const TextStyle(
                      fontSize: 24,
                      fontWeight: FontWeight.bold,
                      color: Colors.white,
                    ),
                  ),
                ),
              ),
              const Padding(padding: EdgeInsets.only(top: 45)),
              _buildSignUpPrompt(),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildTextField({
    required String key,
    required String hintText,
    required String helperText,
    required FormFieldValidator<String>? validator,
    required ValueChanged<String> onChanged,
    bool obscureText = false,
    Widget? suffixIcon,
  }) {
    return Padding(
      padding: const EdgeInsets.fromLTRB(51, 0, 51, 10),
      child: SizedBox(
        width: 295,
        height: 65,
        child: TextFormField(
          key: Key('${key}Field'),
          autovalidateMode: AutovalidateMode.onUserInteraction,
          validator: validator,
          onChanged: onChanged,
          enableSuggestions: false,
          obscureText: obscureText,
          autocorrect: false,
          textAlign: TextAlign.center,
          decoration: InputDecoration(
            hintStyle: GoogleFonts.yaldevi(
              textStyle: const TextStyle(
                fontSize: 20,
                fontWeight: FontWeight.bold,
                color: Color.fromRGBO(62, 110, 162, 0.5),
              ),
            ),
            helperText: helperText,
            contentPadding: const EdgeInsets.symmetric(vertical: 10, horizontal: 40),
            errorStyle: GoogleFonts.yaldevi(
              textStyle: const TextStyle(
                fontSize: 10,
                fontWeight: FontWeight.bold,
                color: Colors.red,
              ),
            ),
            hintText: hintText,
            filled: true,
            fillColor: Colors.white,
            border: OutlineInputBorder(
              borderSide: const BorderSide(width: 1),
              borderRadius: BorderRadius.circular(15),
            ),
            suffixIcon: suffixIcon,
            focusedBorder: OutlineInputBorder(
              borderSide: const BorderSide(width: 0),
              borderRadius: BorderRadius.circular(15),
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildSignUpPrompt() {
    return RichText(
      key: const Key('signupPrompt'),
      text: TextSpan(
        text: 'Don\'t have an account? ',
        style: GoogleFonts.yaldevi(
          textStyle: const TextStyle(
            fontSize: 14,
            fontWeight: FontWeight.bold,
            color: Colors.white,
          ),
        ),
        children: <TextSpan>[
          TextSpan(
            text: 'Create',
            style: GoogleFonts.yaldevi(
              textStyle: const TextStyle(
                fontSize: 16,
                fontWeight: FontWeight.bold,
                color: Color.fromRGBO(0, 174, 240, 1),
              ),
            ),
            recognizer: TapGestureRecognizer()
              ..onTap = () {
                Navigator.pushReplacement(
                  context,
                  MaterialPageRoute(builder: (context) => const SignUp()),
                );
              },
          ),
        ],
      ),
    );
  }
}

================
File: lib/screens/post_screen.dart
================
import 'dart:convert'; // For JSON encoding
import 'package:http/http.dart' as http; // For making HTTP requests
import 'package:flutter/material.dart';
import 'package:flutter/foundation.dart';
import 'package:ramble/screens/home_screen.dart';
import 'package:shared_preferences/shared_preferences.dart';

class PostScreen extends StatelessWidget {
  final TextEditingController contentController = TextEditingController();
  final String username = ""; // Replace with the actual username
  final String profilePhotoUrl = "https://i.pravatar.cc/400?img=60";

  final String? previousPage; // Accept previous page info
  PostScreen({super.key, this.previousPage});

  // Function to send POST request to Flask server
  Future<void> createPost() async {
    const String apiUrl = 'http://10.0.2.2:8000/post/'; // Replace with your Flask server URL

    SharedPreferences prefs = await SharedPreferences.getInstance();
    final token = prefs.getString('authToken');

    // final token = 'cd5c90a9cc046399795dc6e002a31eaa360f2eb8';

    // Create the JSON data to send
    final Map<String, dynamic> postData = {
      'text': contentController.text, // Get the content from the TextField
    };

    try {
      // Make the POST request
      final response = await http.post(
        Uri.parse(apiUrl),
        headers: {
          'Content-Type': 'application/json', // Tell the server we're sending JSON
          'Authorization': 'Token $token'
        },
        body: jsonEncode(postData), // Convert the map to JSON
      );

      if (response.statusCode == 201) {
        // If the server returns a 201 CREATED response
        if (kDebugMode) {
          debugPrint("Post created successfully.");
        }
        // You can navigate back to the feed screen after posting
      } else {
        // If the server returns an error
        if (kDebugMode) {
          debugPrint("Failed to create post. Error: ${response.body}");
        }
      }
    } catch (error) {
      if (kDebugMode) {
        debugPrint("Error occurred while making the POST request: $error");
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text(
          'New Post',
          style: TextStyle(color: Colors.white), // Title text color to white
        ),
        backgroundColor: const Color(0xFF2C4B69), // AppBar background color
        iconTheme: const IconThemeData(
          color: Colors.white, // Back button color to white
        ),
        leading: IconButton(
          icon: const Icon(Icons.arrow_back),
          onPressed: () {
            if (previousPage == 'login' || previousPage == 'signup') {
              // Navigate to HomeScreen if the previous page is login or signup
              Navigator.pushReplacement(
                context,
                MaterialPageRoute(builder: (context) => const HomeScreen(previousPage: 'post',)),
              );
            } else {
              // Go back to the previous page in the stack
              Navigator.pop(context);
            }
          },
        ),       
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            Row(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const CircleAvatar(
                  radius: 24,
                  backgroundImage: NetworkImage(
                      'https://example.com/your-profile-photo.jpg'),  // Replace with the actual profile photo URL
                ),
                const SizedBox(width: 16),
                Expanded(
                  child: TextFormField(
                    controller: contentController,
                    maxLines: null,  // To make the text box grow as user types
                    decoration: const InputDecoration(
                      hintText: "What's on your mind?",
                      border: InputBorder.none,
                    ),
                  ),
                ),
              ],
            ),
          ],
        ),
      ),
      // floatingActionButton: FloatingActionButton(
      //   backgroundColor: const Color(0xFF2C4B69),
      //   child: const Text('Post', selectionColor: Color(0xFFFFFFFF)),
      //   onPressed: () {
      //     // String postContent = contentController.text;

      //     // Call API to post the content
      //     createPost();

      //     // Navigate back to feed page
      //     Navigator.pop(context);
      //   },
      // ),

      floatingActionButton: FloatingActionButton.extended(
        onPressed: () {
          // Call API to post the content
          createPost();

          // Navigate back to feed page
          Navigator.pop(context);
        },
        label: const Text(
          'Post',
          style: TextStyle(
            color: Colors.white, // Text color white
            fontSize: 18,
            fontWeight: FontWeight.bold,
          ),
        ),
        backgroundColor: const Color(0xFF2C4B69), // Background color
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(20), // Capsule shape
        ),
      ),

    );
  }
}

================
File: lib/screens/profile_screen.dart
================
import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:http/http.dart' as http;
import 'package:intl/intl.dart';
import 'package:ramble/screens/edit_profile_screen.dart';
import 'package:ramble/widgets/custom_bottom_navbar.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'home_screen.dart';
import 'search_screen.dart';
import 'package:ramble/service_urls.dart';

class ProfileScreen extends StatefulWidget {
  final String previousPage;
  const ProfileScreen({super.key, required this.previousPage});

  @override
  _ProfileScreenState createState() => _ProfileScreenState();
}

class _ProfileScreenState extends State<ProfileScreen> {
  List<dynamic> posts = [];
  String? username;
  String? firstName;
  String? lastName;
  String? bio;

  int followersCount = 0;
  int followingCount = 0;
  int postCount = 0;

  bool isLoading = true;

  @override
  void initState() {
    super.initState();
    fetchProfileData();
  }

  Future<void> fetchProfileData() async {
    setState(() => isLoading = true);

    try {
      final prefs = await SharedPreferences.getInstance();
      final token = prefs.getString('authToken');

      // Fetch user profile details
      final profileResponse = await http.get(
        Uri.parse('${USER_SERVICE_URL}profile/'),
        headers: {
          'Content-Type': 'application/json; charset=UTF-8',
          'Authorization': 'Bearer $token',
        },
      );

      if (profileResponse.statusCode == 200) {
        final profileData = json.decode(profileResponse.body);

        setState(() {
          username = profileData['username'];
          firstName = profileData['first_name'];
          lastName = profileData['last_name'];
          bio = profileData['bio'];
        });
      } else {
        _showErrorSnackbar('Failed to load profile data');
      }

      // Fetch posts
      final postsResponse = await http.get(
        Uri.parse('${POST_SERVICE_URL}posts/'),
        headers: {
          'Content-Type': 'application/json; charset=UTF-8',
          'Authorization': 'Bearer $token',
        },
      );

      if (postsResponse.statusCode == 200) {
        final List<dynamic> postData = json.decode(postsResponse.body);
        postData.sort((a, b) => DateTime.parse(b['timestamp'])
            .compareTo(DateTime.parse(a['timestamp']))); // Sort posts
        setState(() {
          posts = postData;
          postCount = postData.length;
        });
      }

      // Fetch followers count
      final followersResponse = await http.get(
        Uri.parse('${FOLLOW_SERVICE_URL}followers/'),
        headers: {
          'Content-Type': 'application/json; charset=UTF-8',
          'Authorization': 'Bearer $token',
        },
      );

      if (followersResponse.statusCode == 200) {
        setState(() {
          followersCount =
              json.decode(followersResponse.body)['total_followers'];
        });
      }

      // Fetch following count
      final followingResponse = await http.get(
        Uri.parse('${FOLLOW_SERVICE_URL}followees/'),
        headers: {
          'Content-Type': 'application/json; charset=UTF-8',
          'Authorization': 'Bearer $token',
        },
      );

      if (followingResponse.statusCode == 200) {
        setState(() {
          followingCount =
              json.decode(followingResponse.body)['total_following'];
        });
      }
    } catch (error) {
      _showErrorSnackbar('Error fetching profile data: $error');
    } finally {
      setState(() => isLoading = false);
    }
  }

  void _showErrorSnackbar(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message, style: const TextStyle(color: Colors.white)),
        backgroundColor: Colors.red,
        duration: const Duration(seconds: 3),
      ),
    );
  }

  void _navigateToEditProfile() async {
    final updated = await Navigator.push(
      context,
      MaterialPageRoute(builder: (context) => const EditProfileScreen()),
    );

    if (updated == true) {
      // Reload profile data after editing
      fetchProfileData();
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color.fromRGBO(62, 110, 162, 1),
      appBar: _buildAppBar(),
      body: isLoading
          ? const Center(child: CircularProgressIndicator(color: Colors.white))
          : _buildProfileBody(),
      bottomNavigationBar: CustomBottomNavBar(
        currentIndex: 2,
        onTap: _handleNavigation,
      ),
    );
  }

  PreferredSizeWidget _buildAppBar() {
    return PreferredSize(
      preferredSize: const Size.fromHeight(57.0),
      child: Material(
        color: const Color.fromRGBO(62, 110, 162, 1),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            AppBar(
              iconTheme: const IconThemeData(color: Colors.white),
              backgroundColor: const Color.fromRGBO(62, 110, 162, 1),
              title: Text(
                'Your Profile',
                style: GoogleFonts.yaldevi(
                  textStyle: const TextStyle(
                    fontSize: 24,
                    fontWeight: FontWeight.bold,
                    color: Colors.white,
                  ),
                ),
              ),
              centerTitle: true,
            ),
            Container(
              height: 1,
              color: Colors.white.withOpacity(0.5),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildProfileBody() {
    return SingleChildScrollView(
      child: Column(
        children: [
          _buildProfileInfo(),
          _buildStatsSection(),
          _buildEditProfileButton(),
          const Divider(color: Colors.white70),
          _buildPostsSection(),
        ],
      ),
    );
  }

  Widget _buildProfileInfo() {
    return Padding(
      padding: const EdgeInsets.all(16.0),
      child: Row(
        children: [
          CircleAvatar(
            radius: 40,
            backgroundColor: Colors.grey[300],
            child: const Icon(Icons.person, size: 40, color: Colors.white),
          ),
          const SizedBox(width: 20),
          Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                username ?? 'Unknown User',
                style: GoogleFonts.yaldevi(
                  textStyle: const TextStyle(
                    fontSize: 18,
                    fontWeight: FontWeight.bold,
                    color: Colors.white,
                  ),
                ),
              ),
              Row(
                children: [
                  Text(
                    firstName ?? 'First Name',
                    style: GoogleFonts.yaldevi(
                      textStyle: const TextStyle(
                        fontSize: 14,
                        fontWeight: FontWeight.bold,
                        color: Colors.white,
                      ),
                    ),
                  ),
                  const SizedBox(width: 4),
                  Text(
                    lastName ?? 'Last Name',
                    style: GoogleFonts.yaldevi(
                      textStyle: const TextStyle(
                        fontSize: 14,
                        fontWeight: FontWeight.bold,
                        color: Colors.white,
                      ),
                    ),
                  ),
                ],
              ),
              Text(
                bio ?? 'No Bio',
                style: GoogleFonts.yaldevi(
                  textStyle: const TextStyle(
                    fontSize: 14,
                    color: Colors.white70,
                  ),
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildStatsSection() {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 20.0),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceEvenly,
        children: [
          _buildCountColumn('Posts', postCount),
          _buildCountColumn('Followers', followersCount),
          _buildCountColumn('Following', followingCount),
        ],
      ),
    );
  }

  Widget _buildCountColumn(String label, int count) {
    return Column(
      children: [
        Text(
          label,
          style: GoogleFonts.yaldevi(
            textStyle: const TextStyle(
              fontSize: 16,
              fontWeight: FontWeight.bold,
              color: Colors.white,
            ),
          ),
        ),
        Text(
          count.toString(),
          style: GoogleFonts.yaldevi(
            textStyle: const TextStyle(
              fontSize: 14,
              color: Colors.white70,
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildEditProfileButton() {
    return ElevatedButton(
      onPressed: _navigateToEditProfile,
      style: ElevatedButton.styleFrom(
        backgroundColor: const Color.fromRGBO(0, 174, 240, 1),
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(20),
        ),
      ),
      child: Text(
        'Edit Profile',
        style: GoogleFonts.yaldevi(
          textStyle: const TextStyle(
            fontSize: 16,
            fontWeight: FontWeight.bold,
            color: Colors.white,
          ),
        ),
      ),
    );
  }

  Widget _buildPostsSection() {
    return Padding(
      padding: const EdgeInsets.all(16.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'Your Posts',
            style: GoogleFonts.yaldevi(
              textStyle: const TextStyle(
                fontSize: 18,
                fontWeight: FontWeight.bold,
                color: Colors.white,
              ),
            ),
          ),
          const SizedBox(height: 20),
          posts.isEmpty
              ? Container(
                  height: 200,
                  child: const Center(
                    child: Text(
                      'No posts yet.',
                      style: TextStyle(color: Colors.white70),
                    ),
                  ),
                )
              : ListView.builder(
                  shrinkWrap: true,
                  physics: const NeverScrollableScrollPhysics(),
                  itemCount: posts.length,
                  itemBuilder: (context, index) {
                    final post = posts[index];
                    return _buildPostCard(post);
                  },
                ),
        ],
      ),
    );
  }

  Widget _buildPostCard(Map<String, dynamic> post) {
    final formattedDate = DateFormat('MMM d, yyyy, h:mm a')
        .format(DateTime.parse(post['timestamp']).toLocal());
    return Card(
      margin: const EdgeInsets.symmetric(vertical: 8, horizontal: 16),
      color: Colors.white,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(15),
      ),
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Row(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            CircleAvatar(
              radius: 24,
              backgroundColor: Colors.grey[200],
              child: const Icon(Icons.person, color: Color(0xFF2C4B69)),
            ),
            const SizedBox(width: 16),
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      Text(
                        post['username'] ?? 'Anonymous',
                        style: GoogleFonts.yaldevi(
                          textStyle: const TextStyle(
                            fontSize: 16,
                            fontWeight: FontWeight.bold,
                            color: Colors.black,
                          ),
                        ),
                      ),
                      Text(
                        formattedDate,
                        style: GoogleFonts.yaldevi(
                          textStyle: const TextStyle(
                            fontSize: 12,
                            color: Colors.grey,
                          ),
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(height: 8),
                  Text(
                    post['text'] ?? '',
                    style: GoogleFonts.yaldevi(
                      textStyle: const TextStyle(
                        fontSize: 14,
                        color: Colors.black,
                      ),
                    ),
                  ),
                  const SizedBox(height: 8),
                  Row(
                    children: [
                      const Icon(Icons.thumb_up, size: 16, color: Colors.grey),
                      const SizedBox(width: 4),
                      Text(
                        post['likes']?.toString() ?? '0',
                        style: GoogleFonts.yaldevi(
                          textStyle: const TextStyle(
                            fontSize: 12,
                            color: Colors.grey,
                          ),
                        ),
                      ),
                    ],
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  void _handleNavigation(int index) {
    if (index == 0) {
      Navigator.pushReplacement(
        context,
        MaterialPageRoute(
          builder: (context) => const HomeScreen(previousPage: 'profile'),
        ),
      );
    } else if (index == 1) {
      Navigator.pushReplacement(
        context,
        MaterialPageRoute(
          builder: (context) => const SearchScreen(previousPage: 'profile'),
        ),
      );
    }
  }
}

================
File: lib/screens/search_screen.dart
================
import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:shared_preferences/shared_preferences.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:ramble/service_urls.dart';
import 'package:ramble/screens/home_screen.dart';
import 'package:ramble/screens/profile_screen.dart';
import 'package:ramble/widgets/custom_bottom_navbar.dart';

class SearchScreen extends StatefulWidget {
  const SearchScreen({super.key, required this.previousPage});

  final String previousPage;

  @override
  _SearchScreenState createState() => _SearchScreenState();
}

class _SearchScreenState extends State<SearchScreen> {
  final TextEditingController _searchController = TextEditingController();
  List<Map<String, dynamic>> searchResults = [];
  bool isLoading = false;
  bool noResultsFound = false;

  Future<void> _searchUsers(String query) async {
    if (query.trim().isEmpty) {
      setState(() {
        searchResults = [];
        noResultsFound = false;
      });
      return;
    }

    setState(() {
      isLoading = true;
      noResultsFound = false;
    });

    final String searchApiUrl = '${USER_SERVICE_URL}search/users/?q=$query';
    final String followingApiUrl = '${FOLLOW_SERVICE_URL}followees/';
    SharedPreferences prefs = await SharedPreferences.getInstance();
    final token = prefs.getString('authToken');

    if (token == null || token.isEmpty) {
      _showErrorSnackbar('Authentication token is missing. Please log in again.');
      setState(() {
        isLoading = false;
      });
      return;
    }

    try {
      // Perform both API calls in parallel
      final responses = await Future.wait([
        http.get(Uri.parse(searchApiUrl), headers: {'Authorization': 'Bearer $token'}),
        http.get(Uri.parse(followingApiUrl), headers: {'Authorization': 'Bearer $token'}),
      ]);

      final searchResponse = responses[0];
      final followingResponse = responses[1];

      if (searchResponse.statusCode == 200 && followingResponse.statusCode == 200) {
        final List<dynamic> searchResultsData = jsonDecode(searchResponse.body);
        final List<dynamic> followingIds = jsonDecode(followingResponse.body)['following'];

        setState(() {
          if (searchResultsData.isEmpty) {
            noResultsFound = true;
          } else {
            // Merge search results with `isFollowing` status
            searchResults = searchResultsData.map((user) {
              return {
                'id': user['id'],
                'username': user['user']['username'],
                'firstName': user['user']['first_name'],
                'lastName': user['user']['last_name'],
                'bio': user['bio'],
                'isFollowing': followingIds.contains(user['id']),
              };
            }).toList();
          }
        });
      } else {
        _showErrorSnackbar('Failed to fetch search results or following list.');
      }
    } catch (error) {
      _showErrorSnackbar('An error occurred while searching.');
    } finally {
      setState(() {
        isLoading = false;
      });
    }
  }

  Future<void> _followUser(int userId, bool isFollowing) async {
    final String apiUrl = isFollowing
        ? '${FOLLOW_SERVICE_URL}unfollow/'
        : '${FOLLOW_SERVICE_URL}follow/';
    SharedPreferences prefs = await SharedPreferences.getInstance();
    final token = prefs.getString('authToken');

    if (token == null || token.isEmpty) {
      _showErrorSnackbar('Authentication token is missing. Please log in again.');
      return;
    }

    try {
      final response = await http.post(
        Uri.parse(apiUrl),
        headers: {
          'Authorization': 'Bearer $token',
          'Content-Type': 'application/json',
        },
        body: jsonEncode({'followee_id': userId}),
      );

      if (response.statusCode == 200 || response.statusCode == 201) {
        setState(() {
          // Update the `isFollowing` status for the specific user in `searchResults`
          for (var user in searchResults) {
            if (user['id'] == userId) {
              user['isFollowing'] = !isFollowing;
              break;
            }
          }
        });

        final successMessage = isFollowing
            ? 'You unfollowed ${searchResults.firstWhere((u) => u['id'] == userId)['username']}.'
            : 'You started following ${searchResults.firstWhere((u) => u['id'] == userId)['username']}.';

        _showSuccessSnackbar(successMessage);
      } else {
        _showErrorSnackbar('Failed to update follow status. Status code: ${response.statusCode}');
      }
    } catch (error) {
      _showErrorSnackbar('An error occurred while updating follow status.');
    }
  }

  void _showErrorSnackbar(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message, style: const TextStyle(color: Colors.white)),
        backgroundColor: Colors.red,
        duration: const Duration(seconds: 3),
      ),
    );
  }

  void _showSuccessSnackbar(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message, style: const TextStyle(color: Colors.white)),
        backgroundColor: Colors.green,
        duration: const Duration(seconds: 3),
      ),
    );
  }

  Widget _buildUserCard(Map<String, dynamic> user) {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 8.0),
      child: Container(
        decoration: BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.circular(15),
        ),
        child: Padding(
          padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
          child: Row(
            crossAxisAlignment: CrossAxisAlignment.center,
            children: [
              CircleAvatar(
                radius: 24,
                backgroundColor: Colors.grey[300],
                child: const Icon(Icons.person, color: Colors.white),
              ),
              const SizedBox(width: 16),
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      user['username'],
                      style: GoogleFonts.yaldevi(
                        textStyle: const TextStyle(
                          fontSize: 16,
                          fontWeight: FontWeight.bold,
                          color: Colors.black,
                        ),
                      ),
                    ),
                    Text(
                      '${user['firstName']} ${user['lastName']}',
                      style: GoogleFonts.yaldevi(
                        textStyle: const TextStyle(
                          fontSize: 14,
                          color: Colors.grey,
                        ),
                      ),
                    ),
                  ],
                ),
              ),
              ElevatedButton(
                onPressed: () => _followUser(user['id'], user['isFollowing']),
                style: ElevatedButton.styleFrom(
                  backgroundColor: user['isFollowing']
                      ? Colors.red[400]
                      : const Color.fromRGBO(0, 174, 240, 1),
                  padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(8),
                  ),
                ),
                child: Text(
                  user['isFollowing'] ? 'Unfollow' : 'Follow',
                  style: GoogleFonts.yaldevi(
                    textStyle: const TextStyle(
                      fontSize: 14,
                      fontWeight: FontWeight.bold,
                      color: Colors.white,
                    ),
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color.fromRGBO(62, 110, 162, 1),
      body: Column(
        children: [
          const SizedBox(height: 20), // Add spacing above the search bar
          Container(
            color: const Color.fromRGBO(62, 110, 162, 1),
            padding: const EdgeInsets.all(16.0),
            child: TextField(
              controller: _searchController,
              onChanged: _searchUsers,
              decoration: InputDecoration(
                hintText: 'Search users...',
                hintStyle: GoogleFonts.yaldevi(
                  textStyle: const TextStyle(color: Colors.white54, fontSize: 16),
                ),
                filled: true,
                fillColor: Colors.white.withOpacity(0.1),
                border: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(8.0),
                  borderSide: BorderSide.none,
                ),
                prefixIcon: const Icon(Icons.search, color: Colors.white),
              ),
              style: GoogleFonts.yaldevi(
                textStyle: const TextStyle(color: Colors.white, fontSize: 18),
              ),
            ),
          ),
          Expanded(
            child: isLoading
                ? const Center(child: CircularProgressIndicator(color: Colors.white))
                : searchResults.isEmpty && noResultsFound
                    ? const Center(
                        child: Text(
                          "No users found.",
                          style: TextStyle(
                            color: Colors.white,
                            fontSize: 16,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      )
                    : ListView.builder(
                        itemCount: searchResults.length,
                        itemBuilder: (context, index) =>
                            _buildUserCard(searchResults[index]),
                      ),
          ),
        ],
      ),
      bottomNavigationBar: CustomBottomNavBar(
        currentIndex: 1, // Highlight the Search screen
        onTap: (index) {
          if (index == 0) {
            Navigator.pushReplacement(
              context,
              MaterialPageRoute(
                builder: (context) => const HomeScreen(previousPage: 'search'),
              ),
            );
          } else if (index == 2) {
            Navigator.pushReplacement(
              context,
              MaterialPageRoute(
                builder: (context) => const ProfileScreen(previousPage: 'search'),
              ),
            );
          }
        },
      ),
    );
  }
}

================
File: lib/screens/signup_screen.dart
================
import 'package:flutter/gestures.dart';
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'home_screen.dart';
import 'login_screen.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:ramble/service_urls.dart';

class SignUp extends StatefulWidget {
  const SignUp({super.key});

  @override
  SignUpState createState() => SignUpState();
}

class SignUpState extends State<SignUp> {
  final GlobalKey<FormState> _formKey = GlobalKey<FormState>();
  bool passwordVisible = false;
  bool confirmPasswordVisible = false;
  final bool isLoading = false;

  // Define regex patterns
  final RegExp emailRegex = RegExp(r'^\S+@\S+$');
  final RegExp nameRegex = RegExp(r"^[A-Za-z]+(?:[' -][A-Za-z]+)*$");
  final RegExp usernameRegExp =
      RegExp(r'^(?=.{3,15}$)(?![_])[a-zA-Z0-9_]+(?<![_])$');

  String? firstName;
  String? lastName;
  String? userName;
  String? email;
  String? password;
  String? confirmPassword;

  @override
  void initState() {
    super.initState();
    passwordVisible = true;
    confirmPasswordVisible = true;
  }

  String? validateUserName(String? value) {
    if (value == null || value.isEmpty) {
      return 'Please enter a username';
    } else if (!usernameRegExp.hasMatch(value)) {
      return 'Please enter a valid username';
    }
    return null; // Return null if validation passes
  }

  String? validateFirstName(String? value) {
    if (value == null || value.isEmpty) {
      return 'Please enter your first name';
    } else if (!nameRegex.hasMatch(value)) {
      return 'Please enter a valid name';
    }
    return null; // Return null if validation passes
  }

  String? validateLastName(String? value) {
    if (value == null || value.isEmpty) {
      return 'Please enter your last name';
    } else if (!nameRegex.hasMatch(value)) {
      return 'Please enter a valid name';
    }
    return null; // Return null if validation passes
  }

  String? validateEmail(String? value) {
    if (value == null || value.isEmpty) {
      return 'Please enter your email';
    } else if (!emailRegex.hasMatch(value)) {
      return 'Please enter a valid email';
    }
    return null; // Return null if validation passes
  }

  String? validatePassword(String? value) {
    if (value == null || value.isEmpty) {
      return 'Please enter your password'; // Message for empty password
    } else if (value.length < 8) {
      return 'Must be at least 8 characters'; // Message for length
    } else if (!RegExp(r'[A-Za-z]').hasMatch(value)) {
      return 'Must contain at least 1 letter'; // Message for letters
    } else if (!RegExp(r'[0-9]').hasMatch(value)) {
      return 'Must contain at least one number'; // Message for numbers
    } else if (!RegExp(r'[!@#$%^&*(),.?":{}|<>]').hasMatch(value)) {
      return 'Must contain at least 1 special character'; // Message for special characters
    }
    return null; // Return null if validation passes
  }

  String? validateConfirmPassword(String? value) {
    if (value == null || value.isEmpty) {
      return 'Please confirm your password';
    } else if (value != password) {
      return 'Passwords do not match';
    }
    return null; // Return null if validation passes
  }

  Future<void> signupUser(BuildContext context, String username, String email,
      String password, String firstName, String lastName) async {
    final url =
        Uri.parse('${USER_SERVICE_URL}signup/'); // Replace with your server URL

    // Loading Snackbar
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        behavior: SnackBarBehavior.floating,
        backgroundColor: Color.fromRGBO(0, 174, 240, 1),
        content: Row(
          children: [
            CircularProgressIndicator(color: Colors.white),
            SizedBox(width: 10),
            Expanded(
              child: Text(
                'Signing up...',
                style: TextStyle(color: Colors.white),
              ),
            ),
          ],
        ),
        duration: Duration(seconds: 3),
      ),
    );

    try {
      final response = await http.post(
        url,
        headers: {'Content-Type': 'application/json'},
        body: json.encode({
          "user": {
            'username': username,
            'email': email,
            'password': password,
            'first_name': firstName,
            'last_name': lastName
          },
          "bio": "user bio"
        }),
      );

      // Close the loading Snackbar
      ScaffoldMessenger.of(context).hideCurrentSnackBar();

      if (response.statusCode == 201) {
        // Success response from the server
        final data = json.decode(response.body);
        final token = data['access'];

        // Saving the token in local storage for future API calls
        SharedPreferences prefs = await SharedPreferences.getInstance();
        await prefs.setString('authToken', token);
        await prefs.setBool('isLoggedIn', true);

        // Success Snackbar
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            behavior: SnackBarBehavior.floating,
            content: Row(
              children: [
                Icon(Icons.check_circle, color: Colors.white),
                SizedBox(width: 10),
                Expanded(
                  child: Text(
                    'Signup successful',
                    style: TextStyle(color: Colors.white),
                  ),
                ),
              ],
            ),
            backgroundColor: Colors.green,
            duration: Duration(seconds: 2),
          ),
        );

        // Delay before navigating to HomePage
        Future.delayed(const Duration(seconds: 3), () {
          Navigator.pushReplacement(
            context,
            MaterialPageRoute(
              builder: (context) => HomeScreen(
                previousPage: 'home',
              ),
            ),
          );
        });
      } else {
        // Parse server error response
        final errorResponse = json.decode(response.body);
        String errorMessage = 'Signup failed'; // Default error message

        // Extract error details if present
        if (errorResponse.containsKey('user')) {
          final userError = errorResponse['user'];
          if (userError is Map && userError.containsKey('username')) {
            errorMessage = userError['username'][0];
          } else if (userError is Map && userError.containsKey('email')) {
            errorMessage = userError['email'][0];
          }
        }

        // Show failure Snackbar with parsed error
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            backgroundColor: Color.fromRGBO(0, 174, 240, 1),
            content: Row(
              children: [
                Icon(Icons.error, color: Colors.red),
                SizedBox(width: 10),
                Text(errorMessage),
              ],
            ),
            duration: Duration(seconds: 3),
          ),
        );
      }
    } catch (e) {
      // Hide the loading Snackbar
      ScaffoldMessenger.of(context).hideCurrentSnackBar();

      // Show error Snackbar
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          backgroundColor: Colors.red,
          content: Row(
            children: [
              Icon(Icons.error_outline, color: Colors.white),
              SizedBox(width: 10),
              Text('An error occurred. Please try again.'),
            ],
          ),
          duration: Duration(seconds: 3),
        ),
      );

      print("Error: $e");
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color.fromRGBO(62, 110, 162, 1),
      body: SingleChildScrollView(
        key: const Key('signUpScrollView'),
        physics: const ClampingScrollPhysics(),
        child: Form(
          key: _formKey,
          autovalidateMode: AutovalidateMode.onUserInteraction,
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.center,
            children: [
              Padding(
                padding: const EdgeInsets.fromLTRB(51, 60, 51, 0),
                child: Container(
                  alignment: Alignment.center,
                  constraints:
                      const BoxConstraints(minWidth: 300, minHeight: 100),
                  child: Text(
                    'Ramble',
                    style: GoogleFonts.yaldevi(
                      textStyle: const TextStyle(
                        fontSize: 64,
                        fontWeight: FontWeight.bold,
                        color: Colors.white,
                      ),
                    ),
                  ),
                ),
              ),
              _buildTextField(
                key: Key('firstNameField'),
                hintText: 'First Name',
                helperText: ' ',
                validator: validateFirstName,
                onChanged: (value) => firstName = value,
              ),
              _buildTextField(
                key: Key('lastNameField'),
                hintText: 'Last Name',
                helperText: ' ',
                validator: validateLastName,
                onChanged: (value) => lastName = value,
              ),
              _buildTextField(
                key: Key('userNameField'),
                hintText: 'UserName',
                helperText: ' ',
                validator: validateUserName,
                onChanged: (value) => userName = value,
              ),
              _buildTextField(
                key: Key('emailField'),
                hintText: 'Email',
                helperText: ' ',
                validator: validateEmail,
                onChanged: (value) => email = value,
              ),
              _buildTextField(
                key: Key('passwordField'),
                hintText: 'Password',
                helperText: ' ',
                validator: validatePassword,
                onChanged: (value) => password = value,
                obscureText: passwordVisible,
                suffixIcon: IconButton(
                  onPressed: () {
                    setState(() {
                      passwordVisible = !passwordVisible; // Toggle visibility
                    });
                  },
                  icon: passwordVisible
                      ? const Icon(Icons.visibility_off)
                      : const Icon(Icons.visibility),
                ),
              ),
              _buildTextField(
                key: Key('confirmPasswordField'),
                hintText: 'Confirm Password',
                helperText: ' ',
                validator: validateConfirmPassword,
                onChanged: (value) => confirmPassword = value,
                obscureText: confirmPasswordVisible,
                suffixIcon: IconButton(
                  onPressed: () {
                    setState(() {
                      confirmPasswordVisible =
                          !confirmPasswordVisible; // Toggle visibility
                    });
                  },
                  icon: confirmPasswordVisible
                      ? const Icon(Icons.visibility_off)
                      : const Icon(Icons.visibility),
                ),
              ),
              Padding(
                padding: const EdgeInsets.fromLTRB(51, 30, 51, 0),
                child: SizedBox(
                  width: 295,
                  height: 50,
                  child: ElevatedButton(
                    onPressed: () {
                      if (_formKey.currentState!.validate()) {
                        FocusScope.of(context)
                            .unfocus(); // Dismiss the keyboard
                        signupUser(
                          context,
                          userName!,
                          email!,
                          password!,
                          firstName!,
                          lastName!,
                        );
                      }
                    },
                    style: ElevatedButton.styleFrom(
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(50),
                      ),
                      backgroundColor: const Color.fromRGBO(0, 174, 240, 1),
                    ),
                    child: Text(
                      'Sign Up',
                      style: GoogleFonts.yaldevi(
                        textStyle: const TextStyle(
                          fontSize: 20,
                          fontWeight: FontWeight.bold,
                          color: Colors.white,
                        ),
                      ),
                    ),
                  ),
                ),
              ),
              Padding(
                padding: const EdgeInsets.fromLTRB(51, 25, 51, 0),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Text(
                      'Already Have An Account? ',
                      style: GoogleFonts.yaldevi(
                        textStyle: const TextStyle(
                          fontSize: 12,
                          fontWeight: FontWeight.bold,
                          color: Colors.white,
                        ),
                      ),
                    ),
                    TextButton(
                      key: Key('loginButton'),
                      onPressed: () {
                        Navigator.of(context).pushReplacement(
                          MaterialPageRoute(
                            builder: (context) => const Login(),
                          ),
                        );
                      },
                      child: Text(
                        'Login',
                        style: GoogleFonts.yaldevi(
                          textStyle: const TextStyle(
                            fontSize: 12,
                            fontWeight: FontWeight.bold,
                            color: Color.fromRGBO(0, 174, 240, 1),
                          ),
                        ),
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildTextField({
    Key? key,
    required String hintText,
    required String helperText,
    required FormFieldValidator<String>? validator,
    required ValueChanged<String> onChanged,
    bool obscureText = false,
    Widget? suffixIcon,
  }) {
    // Define content padding based on the presence of a suffix icon
    EdgeInsetsGeometry contentPadding = suffixIcon != null
        ? const EdgeInsets.symmetric(
            vertical: 10, horizontal: 40) // Adjusted for better alignment
        : const EdgeInsets.symmetric(
            vertical: 10, horizontal: 40); // Default padding

    return Padding(
      padding: const EdgeInsets.fromLTRB(51, 10, 51, 0),
      child: SizedBox(
        width: 295,
        height: 65,
        child: TextFormField(
          key: key,
          autovalidateMode: AutovalidateMode.onUserInteraction,
          validator: validator,
          onChanged: onChanged,
          enableSuggestions: false,
          obscureText: obscureText,
          autocorrect: false,
          textAlign: TextAlign.center,
          decoration: InputDecoration(
            hintStyle: GoogleFonts.yaldevi(
              textStyle: const TextStyle(
                fontSize: 20,
                fontWeight: FontWeight.bold,
                color: Color.fromRGBO(62, 110, 162, 0.5),
              ),
            ),
            helperText: helperText,
            contentPadding: contentPadding,
            errorStyle: GoogleFonts.yaldevi(
              textStyle: const TextStyle(
                fontSize: 10,
                fontWeight: FontWeight.bold,
                color: Colors.red,
              ),
            ),
            hintText: hintText,
            filled: true,
            fillColor: Colors.white,
            border: OutlineInputBorder(
              borderSide: const BorderSide(width: 1),
              borderRadius: BorderRadius.circular(15),
            ),
            suffixIcon: suffixIcon,
            focusedBorder: OutlineInputBorder(
              borderSide: const BorderSide(width: 0),
              borderRadius: BorderRadius.circular(15),
            ),
          ),
        ),
      ),
    );
  }
}

================
File: lib/widgets/custom_bottom_navbar.dart
================
import 'package:flutter/material.dart';

class CustomBottomNavBar extends StatelessWidget {
  final int currentIndex;
  final Function(int) onTap;

  const CustomBottomNavBar({
    super.key,
    required this.currentIndex,
    required this.onTap,
  });

  @override
  Widget build(BuildContext context) {
    return Container(
      decoration: const BoxDecoration(
        border: Border(
          top: BorderSide(
            color: Colors.grey, // Border color
            width: 1.0, // Border width
          ),
        ),
      ),
      child: BottomNavigationBar(
        currentIndex: currentIndex,
        backgroundColor: const Color.fromRGBO(62, 110, 162, 1),
        selectedItemColor: Colors.white,
        unselectedItemColor: Colors.white70,
        showSelectedLabels: false,
        showUnselectedLabels: false,
        items: const [
          BottomNavigationBarItem(icon: Icon(Icons.home), label: 'Home'),
          BottomNavigationBarItem(icon: Icon(Icons.search), label: 'Search'),
          BottomNavigationBarItem(icon: Icon(Icons.person), label: 'Profile'),
        ],
        onTap: onTap,
      ),
    );
  }
}

================
File: lib/main.dart
================
import 'package:flutter/material.dart';
import 'package:flutter_native_splash/flutter_native_splash.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:ramble/screens/signup_screen.dart';
import 'package:ramble/screens/login_screen.dart';
import 'package:ramble/screens/home_screen.dart';

Future<void> main() async {
  // Preserving the SplashScreen even after Flutter has initialized to check if use has logged in.
  WidgetsBinding bindings = WidgetsFlutterBinding.ensureInitialized();
  FlutterNativeSplash.preserve(widgetsBinding: bindings);

  // Obtain shared preferences.
  final SharedPreferences prefs = await SharedPreferences.getInstance();

  bool? isLoggedIn = prefs.getBool('isLoggedIn');
  bool Loggedinstate = isLoggedIn ?? false;

  FlutterNativeSplash.remove();
  runApp(MyApp(isLoggedIn: Loggedinstate));
}

class MyApp extends StatelessWidget {
  final bool isLoggedIn;
  const MyApp({required this.isLoggedIn, super.key});

  // This widget is the root of your application.
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Demo',
      theme: ThemeData(
        // This is the theme of your application.
        //
        // TRY THIS: Try running your application with "flutter run". You'll see
        // the application has a purple toolbar. Then, without quitting the app,
        // try changing the seedColor in the colorScheme below to Colors.green
        // and then invoke "hot reload" (save your changes or press the "hot
        // reload" button in a Flutter-supported IDE, or press "r" if you used
        // the command line to start the app).
        //
        // Notice that the counter didn't reset back to zero; the application
        // state is not lost during the reload. To reset the state, use hot
        // restart instead.
        //
        // This works for code too, not just values: Most code changes can be
        // tested with just a hot reload.
        // colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
        useMaterial3: true,
      ),
      home: isLoggedIn
          ? const HomeScreen(
              previousPage: 'home',
            )
          : const LandingPage(),
    );
  }
}

class LandingPage extends StatelessWidget {
  const LandingPage({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
        backgroundColor: const Color.fromRGBO(62, 110, 162, 1),
        body: Column(
          crossAxisAlignment: CrossAxisAlignment.center,
          children: [
            Padding(
                padding: const EdgeInsets.fromLTRB(51, 60, 51, 0),
                child: Container(
                    alignment: Alignment.center,
                    constraints:
                        const BoxConstraints(minWidth: 300, minHeight: 100),
                    child: Text('Ramble',
                        style: GoogleFonts.yaldevi(
                          textStyle: const TextStyle(
                            fontSize: 64,
                            fontWeight: FontWeight.bold,
                            color: Colors.white,
                          ),
                        )))),
            Padding(
                padding: const EdgeInsets.fromLTRB(51, 96, 51, 0),
                child: Image.asset(
                  'assets/images/social_asset.png',
                  fit: BoxFit.contain,
                  height: 200,
                  width: 300,
                )),
            Padding(
              padding: const EdgeInsets.fromLTRB(51, 97, 51, 0),
              child: Column(
                children: [
                  ElevatedButton(
                      onPressed: () => Navigator.pushReplacement(
                          context,
                          MaterialPageRoute(
                              builder: (context) => const SignUp())),
                      style: ElevatedButton.styleFrom(
                        backgroundColor: const Color.fromRGBO(0, 174, 240, 1),
                        minimumSize: const Size(150, 45),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(50),
                        ),
                      ),
                      child: Text(
                        'Signup',
                        style: GoogleFonts.yaldevi(
                            textStyle: const TextStyle(
                          fontSize: 24,
                          fontWeight: FontWeight.bold,
                          color: Colors.white,
                        )),
                      )),
                  const Padding(padding: EdgeInsets.only(top: 32)),
                  ElevatedButton(
                      onPressed: () {
                        Navigator.pushReplacement(
                            context,
                            MaterialPageRoute(
                                builder: (context) => const Login()));
                      },
                      style: ElevatedButton.styleFrom(
                        backgroundColor: const Color.fromRGBO(0, 174, 240, 1),
                        minimumSize: const Size(150, 45),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(50),
                        ),
                      ),
                      child: Text(
                        'Login',
                        style: GoogleFonts.yaldevi(
                            textStyle: const TextStyle(
                          fontSize: 24,
                          fontWeight: FontWeight.bold,
                          color: Colors.white,
                        )),
                      )),
                ],
              ),
            )
          ],
        ));
  }
}

================
File: lib/service_urls.dart
================
String USER_SERVICE_URL = "http://172.17.84.121:8000/";
String POST_SERVICE_URL = "http://172.17.84.121:8003/";
String FOLLOW_SERVICE_URL = "http://172.17.84.121:8002/";

================
File: test/unit/login_test.dart
================
import 'dart:io';
import 'package:flutter_test/flutter_test.dart';
import 'package:ramble/screens/login_screen.dart';

class TestResult {
  final String testName;
  final String input;
  final String expectedOutput;
  final String actualOutput;
  final String status;

  TestResult({
    required this.testName,
    required this.input,
    required this.expectedOutput,
    required this.actualOutput,
    required this.status,
  });

  String toLatexRow() {
    String sanitizedInput = input.isEmpty ? '\\textit{(empty)}' : input.replaceAll('_', '\\_');
    return '$testName & $sanitizedInput & $expectedOutput & $actualOutput & $status \\\\ \\hline';
  }
}

void main() {
  late LoginState loginState;
  List<TestResult> testResults = [];

  setUp(() {
    loginState = LoginState();
  });

  void addTestResult(String testName, String input, String expectedOutput, String actualOutput, bool passed) {
    testResults.add(TestResult(
      testName: testName,
      input: input,
      expectedOutput: expectedOutput,
      actualOutput: actualOutput,
      status: passed ? 'Pass' : 'Fail'
    ));
  }

  group('Username Validation Tests', () {
    test('valid usernames according to pattern', () {
      var validUsernames = {
        'john123': 'alphanumeric',
        'user_name': 'with underscore',
        'test123': 'alphanumeric',
        'validuser': 'alphabetic only',
        'a1_b2': 'mixed characters'
      };

      validUsernames.forEach((username, description) {
        var result = loginState.validateUserName(username);
        addTestResult(
          'Username validation: $description',
          username,
          'null (valid username)',
          result ?? 'valid',
          result == null
        );
      });
    });

    test('invalid usernames', () {
      var invalidUsernames = {
        '': 'empty username',
        'ab': 'too short (min 3)',
        '_startswith_': 'starts with underscore',
        'ends_with_': 'ends with underscore',
        'very_long_username_123': 'too long (max 15)',
        'user@name': 'special characters',
        'user name': 'contains space',
        null: 'null value'
      };

      invalidUsernames.forEach((username, description) {
        var result = loginState.validateUserName(username as String?);
        addTestResult(
          'Username validation: $description',
          username ?? 'null',
          'Please enter a valid username',
          result ?? 'unexpectedly valid',
          result != null
        );
      });
    });
  });

  group('Password Validation Tests', () {
    test('valid passwords', () {
      var validPasswords = {
        'password123': 'simple valid password',
        'TestPassword': 'mixed case password',
        'Pass123!@#': 'complex password',
        '12345678': 'numeric password'
      };

      validPasswords.forEach((password, description) {
        var result = loginState.validatePassword(password);
        addTestResult(
          'Password validation: $description',
          password,
          'null (valid password)',
          result ?? 'valid',
          result == null
        );
      });
    });

    test('invalid passwords', () {
      var invalidPasswords = {
        '': 'empty password',
        null: 'null password'
      };

      invalidPasswords.forEach((password, description) {
        var result = loginState.validatePassword(password as String?);
        addTestResult(
          'Password validation: $description',
          password ?? 'null',
          'Please enter your password',
          result ?? 'unexpectedly valid',
          result != null
        );
      });
    });
  });

  tearDownAll(() {
    final latex = File('login_unit_test_results.tex');
    final latexContent = '''
\\begin{table*}[t]
\\centering
\\caption{Login Screen Unit Test Results}
\\label{tab:login_screen_unit}
\\begin{tabular}{|p{5cm}|p{2.5cm}|p{3cm}|p{3cm}|p{1cm}|}
\\hline
\\textbf{Test Name} & \\textbf{Input} & \\textbf{Expected Output} & \\textbf{Actual Output} & \\textbf{Status} \\\\ \\hline
${testResults.map((r) => r.toLatexRow()).join('\n')}
\\end{tabular}
\\end{table*}
''';
    latex.writeAsStringSync(latexContent);

    // Print summary
    final totalTests = testResults.length;
    final passedTests = testResults.where((r) => r.status == 'Pass').length;
    print('\nTest Summary:');
    print('Total Tests: $totalTests');
    print('Passed: $passedTests');
    print('Failed: ${totalTests - passedTests}');
    print('Success Rate: ${(passedTests / totalTests * 100).toStringAsFixed(2)}%');
  });
}

================
File: test/unit/signup_test.dart
================
import 'dart:io';
import 'package:flutter_test/flutter_test.dart';
import 'package:ramble/screens/signup_screen.dart';

class TestResult {
  final String testName;
  final String input;
  final String expectedOutput;
  final String actualOutput;
  final String status;

  TestResult({
    required this.testName,
    required this.input,
    required this.expectedOutput,
    required this.actualOutput,
    required this.status,
  });

  String toLatexRow() {
    String sanitizedInput = input.isEmpty ? '\\textit{(empty)}' : input.replaceAll('_', '\\_');
    return '$testName & $sanitizedInput & $expectedOutput & $actualOutput & $status \\\\ \\hline';
  }
}

void main() {
  late SignUpState signUpState;
  List<TestResult> testResults = [];

  setUp(() {
    signUpState = SignUpState();
  });

  void addTestResult(String testName, String input, String expectedOutput, String actualOutput, bool passed) {
    testResults.add(TestResult(
      testName: testName,
      input: input,
      expectedOutput: expectedOutput,
      actualOutput: actualOutput,
      status: passed ? 'Pass' : 'Fail'
    ));
  }

  group('Username Validation Tests', () {
    test('valid usernames', () {
      // Test valid usernames
      var inputs = ['john123', 'user_name', 'test123'];
      for (var input in inputs) {
        var result = signUpState.validateUserName(input);
        addTestResult(
          'Username validation: valid username',
          input,
          'Valid username',
          result == null ? 'Valid username' : result,
          result == null
        );
      }
    });

    test('invalid usernames', () {
      var testCases = {
        '': 'empty username',
        'ab': 'username too short',
        '_startswith_': 'invalid start character',
        'verylongusername123456': 'username too long',
        'user@name': 'invalid characters'
      };

      testCases.forEach((input, description) {
        var result = signUpState.validateUserName(input);
        addTestResult(
          'Username validation: $description',
          input,
          'Invalid username',
          result ?? 'Unexpected valid result',
          result != null
        );
      });
    });
  });

  group('Email Validation Tests', () {
    test('valid emails', () {
      var validEmails = [
        'test@example.com',
        'user.name@domain.co.in',
        'user+label@example.com'
      ];

      for (var email in validEmails) {
        var result = signUpState.validateEmail(email);
        addTestResult(
          'Email validation: valid email',
          email,
          'Valid email',
          result == null ? 'Valid email' : result,
          result == null
        );
      }
    });

    test('invalid emails', () {
      var invalidEmails = {
        '': 'empty email',
        'invalidemail': 'missing @ symbol',
        'user@': 'missing domain',
        '@domain.com': 'missing username',
        'user@.com': 'invalid domain format'
      };

      invalidEmails.forEach((email, description) {
        var result = signUpState.validateEmail(email);
        addTestResult(
          'Email validation: $description',
          email,
          'Invalid email',
          result ?? 'Unexpected valid result',
          result != null
        );
      });
    });
  });

  group('Password Validation Tests', () {
    test('valid passwords', () {
      var validPasswords = [
        'Password123!',
        'Test@2023',
        'Complex1!Password'
      ];

      for (var password in validPasswords) {
        var result = signUpState.validatePassword(password);
        addTestResult(
          'Password validation: valid password',
          password,
          'Valid password',
          result == null ? 'Valid password' : result,
          result == null
        );
      }
    });

    test('invalid passwords', () {
      var invalidPasswords = {
        '': 'empty password',
        'pass': 'too short',
        'password': 'no number or special char',
        'Password1': 'no special char',
        'Password!': 'no number',
        '12345678!': 'no letter'
      };

      invalidPasswords.forEach((password, description) {
        var result = signUpState.validatePassword(password);
        addTestResult(
          'Password validation: $description',
          password,
          'Invalid password',
          result ?? 'Unexpected valid result',
          result != null
        );
      });
    });
  });

  group('Name Validation Tests', () {
    test('valid names', () {
      var validNames = [
        'John',
        'Mary-Jane',
        "O'Connor"
      ];

      for (var name in validNames) {
        var result = signUpState.validateFirstName(name);
        addTestResult(
          'Name validation: valid name',
          name,
          'Valid name',
          result == null ? 'Valid name' : result,
          result == null
        );
      }
    });

    test('invalid names', () {
      var invalidNames = {
        '': 'empty name',
        '123': 'numeric name',
        'John123': 'alphanumeric name',
        'John@': 'special characters'
      };

      invalidNames.forEach((name, description) {
        var result = signUpState.validateFirstName(name);
        addTestResult(
          'Name validation: $description',
          name,
          'Invalid name',
          result ?? 'Unexpected valid result',
          result != null
        );
      });
    });
  });

  group('Confirm Password Validation Tests', () {
    test('matching passwords', () {
      signUpState.password = 'Password123!';
      var result = signUpState.validateConfirmPassword('Password123!');
      addTestResult(
        'Confirm Password: matching passwords',
        'Password123!',
        'Passwords match',
        result == null ? 'Passwords match' : result,
        result == null
      );
    });

    test('non-matching passwords', () {
      signUpState.password = 'Password123!';
      var nonMatchingCases = {
        'Password123': 'different password',
        '': 'empty password',
        'DifferentPass123!': 'completely different password'
      };

      nonMatchingCases.forEach((password, description) {
        var result = signUpState.validateConfirmPassword(password);
        addTestResult(
          'Confirm Password: $description',
          password,
          'Passwords do not match',
          result ?? 'Unexpected valid result',
          result != null
        );
      });
    });
  });

  tearDownAll(() {
    final latex = File('test_results.tex');
    final latexContent = '''
\\begin{table*}[t]
\\centering
\\caption{Signup Screen Unit Test}
\\label{tab:signup_screen_unit}
\\begin{tabular}{|p{5cm}|p{2.5cm}|p{3cm}|p{3cm}|p{1cm}|}
\\hline
\\textbf{Test Name} & \\textbf{Input} & \\textbf{Expected Output} & \\textbf{Actual Output} & \\textbf{Status} \\\\ \\hline
${testResults.map((r) => r.toLatexRow()).join('\n')}
\\end{tabular}
\\end{table*}
''';
    latex.writeAsStringSync(latexContent);

    // Print summary
    final totalTests = testResults.length;
    final passedTests = testResults.where((r) => r.status == 'Pass').length;
    print('\nTest Summary:');
    print('Total Tests: $totalTests');
    print('Passed: $passedTests');
    print('Failed: ${totalTests - passedTests}');
    print('Success Rate: ${(passedTests / totalTests * 100).toStringAsFixed(2)}%');
  });
}

================
File: test/widget/login_widget_test.dart
================
import 'dart:io';
import 'package:flutter/material.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:ramble/screens/login_screen.dart';
import 'package:ramble/screens/signup_screen.dart';
import 'package:google_fonts/google_fonts.dart';

class WidgetTestResult {
  final String testCategory;
  final String testCase;
  final String testAction;
  final String expectedBehavior;
  final String actualBehavior;
  final String status;

  WidgetTestResult({
    required this.testCategory,
    required this.testCase,
    required this.testAction,
    required this.expectedBehavior,
    required this.actualBehavior,
    required this.status,
  });

  String toLatexRow() {
    return '$testCategory & $testCase & $testAction & $expectedBehavior & $actualBehavior & $status \\\\ \\hline';
  }
}

void main() {
  List<WidgetTestResult> testResults = [];

  void addTestResult(String category, String testCase, String action, String expected, String actual, bool passed) {
    testResults.add(WidgetTestResult(
      testCategory: category,
      testCase: testCase,
      testAction: action,
      expectedBehavior: expected,
      actualBehavior: actual,
      status: passed ? 'Pass' : 'Fail'
    ));
  }

  group('Login Widget Tests', () {
    testWidgets('renders all form fields and buttons', (WidgetTester tester) async {
      tester.binding.window.physicalSizeTestValue = const Size(800, 1600);
      tester.binding.window.devicePixelRatioTestValue = 1.0;
      addTearDown(tester.binding.window.clearPhysicalSizeTestValue);

      await tester.pumpWidget(MaterialApp(home: Login()));
      await tester.pumpAndSettle();

      // App Title
      final titleFinder = find.text('Ramble');
      bool titleFound = titleFinder.evaluate().isNotEmpty;
      addTestResult(
        'UI Rendering',
        'Component Visibility',
        'Render app title',
        'Ramble title should be visible',
        titleFound ? 'Title is visible' : 'Title not found',
        titleFound
      );

      // Username field
      final usernameField = find.byKey(const Key('usernameField'));
      bool usernameFound = usernameField.evaluate().isNotEmpty;
      addTestResult(
        'UI Rendering',
        'Component Visibility',
        'Render username field',
        'Username field should be visible',
        usernameFound ? 'Field is visible' : 'Field not found',
        usernameFound
      );

      // Password field
      final passwordField = find.byKey(const Key('passwordField'));
      bool passwordFound = passwordField.evaluate().isNotEmpty;
      addTestResult(
        'UI Rendering',
        'Component Visibility',
        'Render password field',
        'Password field should be visible',
        passwordFound ? 'Field is visible' : 'Field not found',
        passwordFound
      );

      // Login button
      final loginButton = find.byKey(const Key('loginButton'));
      bool loginButtonFound = loginButton.evaluate().isNotEmpty;
      addTestResult(
        'UI Rendering',
        'Component Visibility',
        'Render login button',
        'Login button should be visible',
        loginButtonFound ? 'Button is visible' : 'Button not found',
        loginButtonFound
      );

      // Sign up prompt
      final signUpText = find.text('Don\'t have an account? ');
      final createLink = find.text('Create');
      bool promptFound = signUpText.evaluate().isNotEmpty && createLink.evaluate().isNotEmpty;
      addTestResult(
        'UI Rendering',
        'Component Visibility',
        'Render sign up prompt',
        'Sign up prompt should be visible',
        promptFound ? 'Prompt is visible' : 'Prompt not found',
        promptFound
      );
    });

    testWidgets('validates empty form fields', (WidgetTester tester) async {
      await tester.pumpWidget(MaterialApp(home: Login()));
      await tester.pumpAndSettle();

      // Try to submit empty form
      await tester.tap(find.byKey(const Key('loginButton')));
      await tester.pumpAndSettle();

      final usernameError = find.text('Please enter a username');
      bool usernameErrorShown = usernameError.evaluate().isNotEmpty;
      addTestResult(
        'Form Validation',
        'Empty Field Validation',
        'Submit empty username',
        'Should show username error',
        usernameErrorShown ? 'Error shown' : 'Error not shown',
        usernameErrorShown
      );

      final passwordError = find.text('Please enter your password');
      bool passwordErrorShown = passwordError.evaluate().isNotEmpty;
      addTestResult(
        'Form Validation',
        'Empty Field Validation',
        'Submit empty password',
        'Should show password error',
        passwordErrorShown ? 'Error shown' : 'Error not shown',
        passwordErrorShown
      );
    });

    testWidgets('validates username format', (WidgetTester tester) async {
      await tester.pumpWidget(MaterialApp(home: Login()));
      await tester.pumpAndSettle();

      final invalidUsernames = {
        '_invalid': 'starts with underscore',
        'a': 'too short',
        'very_long_username_123': 'too long',
        'user@name': 'special characters'
      };

      for (var username in invalidUsernames.entries) {
        await tester.enterText(find.byKey(const Key('usernameField')), username.key);
        await tester.pumpAndSettle();

        final errorShown = find.text('Please enter a valid username');
        bool hasError = errorShown.evaluate().isNotEmpty;
        addTestResult(
          'Form Validation',
          'Username Format',
          'Test invalid username: ${username.value}',
          'Should show format error',
          hasError ? 'Error shown' : 'Error not shown',
          hasError
        );
      }
    });

    testWidgets('password visibility toggle works correctly', (WidgetTester tester) async {
      await tester.pumpWidget(MaterialApp(home: Login()));
      await tester.pumpAndSettle();

      // Check initial state (password should be hidden)
      final visibilityOffIcon = find.byIcon(Icons.visibility_off);
      bool initialStateCorrect = visibilityOffIcon.evaluate().isNotEmpty;
      addTestResult(
        'Password Field',
        'Initial Visibility',
        'Check initial password state',
        'Password should be hidden',
        initialStateCorrect ? 'Password is hidden' : 'Password is visible',
        initialStateCorrect
      );

      // Toggle visibility
      await tester.tap(visibilityOffIcon);
      await tester.pumpAndSettle();

      final visibilityIcon = find.byIcon(Icons.visibility);
      bool toggleSuccessful = visibilityIcon.evaluate().isNotEmpty;
      addTestResult(
        'Password Field',
        'Visibility Toggle',
        'Toggle password visibility',
        'Should show visibility icon',
        toggleSuccessful ? 'Password visible' : 'Toggle failed',
        toggleSuccessful
      );
    });

    testWidgets('shows loading state on valid submission', (WidgetTester tester) async {
      await tester.pumpWidget(MaterialApp(home: Login()));
      await tester.pumpAndSettle();

      // Enter valid credentials
      await tester.enterText(find.byKey(const Key('usernameField')), 'validuser');
      await tester.enterText(find.byKey(const Key('passwordField')), 'password123');
      
      // Submit form
      await tester.tap(find.byKey(const Key('loginButton')));
      await tester.pump();

      // Check for loading state
      final loadingMessage = find.text('Logging in...');
      final progressIndicator = find.byType(CircularProgressIndicator);
      bool loadingShown = loadingMessage.evaluate().isNotEmpty && progressIndicator.evaluate().isNotEmpty;

      addTestResult(
        'Login Process',
        'Loading State',
        'Submit valid credentials',
        'Should show loading indicator',
        loadingShown ? 'Loading state shown' : 'Loading state not shown',
        loadingShown
      );
    });
  });

  tearDownAll(() {
    final latex = File('login_widget_test_results.tex');
    final latexContent = '''
\\begin{table*}[t]
\\centering
\\caption{Login Screen Widget Test Results}
\\label{tab:login_screen_widget}
\\begin{tabular}{|p{2.5cm}|p{2.5cm}|p{3cm}|p{3cm}|p{3cm}|p{1cm}|}
\\hline
\\textbf{Category} & \\textbf{Test Case} & \\textbf{Action} & \\textbf{Expected Behavior} & \\textbf{Actual Behavior} & \\textbf{Status} \\\\ \\hline
${testResults.map((r) => r.toLatexRow()).join('\n')}
\\end{tabular}
\\end{table*}
''';
    latex.writeAsStringSync(latexContent);

    // Print summary
    final totalTests = testResults.length;
    final passedTests = testResults.where((r) => r.status == 'Pass').length;
    print('\nWidget Test Summary:');
    print('Total Tests: $totalTests');
    print('Passed: $passedTests');
    print('Failed: ${totalTests - passedTests}');
    print('Success Rate: ${(passedTests / totalTests * 100).toStringAsFixed(2)}%');
  });
}

================
File: test/widget/signup_widget_test.dart
================
import 'dart:io';
import 'package:flutter/material.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:ramble/screens/signup_screen.dart';
import 'package:ramble/screens/login_screen.dart';

class WidgetTestResult {
  final String testCategory;
  final String testCase;
  final String testAction;
  final String expectedBehavior;
  final String actualBehavior;
  final String status;

  WidgetTestResult({
    required this.testCategory,
    required this.testCase,
    required this.testAction,
    required this.expectedBehavior,
    required this.actualBehavior,
    required this.status,
  });

  String toLatexRow() {
    return '$testCategory & $testCase & $testAction & $expectedBehavior & $actualBehavior & $status \\\\ \\hline';
  }
}

void main() {
  List<WidgetTestResult> testResults = [];

  void addTestResult(String category, String testCase, String action, String expected, String actual, bool passed) {
    testResults.add(WidgetTestResult(
      testCategory: category,
      testCase: testCase,
      testAction: action,
      expectedBehavior: expected,
      actualBehavior: actual,
      status: passed ? 'Pass' : 'Fail'
    ));
  }

  group('SignUp Widget Tests', () {
    testWidgets('renders all form fields and buttons', (WidgetTester tester) async {
      tester.binding.window.physicalSizeTestValue = const Size(800, 1600);
      tester.binding.window.devicePixelRatioTestValue = 1.0;
      addTearDown(tester.binding.window.clearPhysicalSizeTestValue);

      await tester.pumpWidget(MaterialApp(home: SignUp()));
      await tester.pumpAndSettle();

      // Check each widget and record result
      var widgetsToFind = {
        'First Name': 'First name field',
        'Last Name': 'Last name field',
        'UserName': 'Username field',
        'Email': 'Email field',
        'Password': 'Password field',
        'Confirm Password': 'Confirm password field',
        'Sign Up': 'Sign up button',
        'Already Have An Account? ': 'Login prompt text',
        'Login': 'Login link'
      };

      widgetsToFind.forEach((widget, description) {
        bool found = find.text(widget).evaluate().isNotEmpty;
        addTestResult(
          'UI Rendering',
          'Component Visibility',
          'Render $description',
          'Component should be visible',
          found ? 'Component is visible' : 'Component not found',
          found
        );
      });
    });

    testWidgets('shows validation errors on empty submission', (WidgetTester tester) async {
      tester.binding.window.physicalSizeTestValue = const Size(800, 1600);
      tester.binding.window.devicePixelRatioTestValue = 1.0;
      addTearDown(tester.binding.window.clearPhysicalSizeTestValue);

      await tester.pumpWidget(MaterialApp(home: SignUp()));
      await tester.ensureVisible(find.text('Sign Up'));
      await tester.pumpAndSettle();
      await tester.tap(find.text('Sign Up'));
      await tester.pumpAndSettle();

      var expectedErrors = {
        'Please enter your first name': 'First name validation',
        'Please enter your last name': 'Last name validation',
        'Please enter a username': 'Username validation',
        'Please enter your email': 'Email validation',
        'Please enter your password': 'Password validation'
      };

      expectedErrors.forEach((error, description) {
        bool found = find.text(error).evaluate().isNotEmpty;
        addTestResult(
          'Form Validation',
          'Empty Field Validation',
          'Submit form without $description',
          'Should show error message',
          found ? 'Error message displayed' : 'Error message not found',
          found
        );
      });
    });

    testWidgets('toggles password visibility', (WidgetTester tester) async {
      tester.binding.window.physicalSizeTestValue = const Size(800, 1600);
      tester.binding.window.devicePixelRatioTestValue = 1.0;
      addTearDown(tester.binding.window.clearPhysicalSizeTestValue);

      await tester.pumpWidget(MaterialApp(home: SignUp()));
      await tester.ensureVisible(find.byKey(Key('passwordField')));
      await tester.pumpAndSettle();

      final textFieldFinder = find.descendant(
        of: find.byKey(Key('passwordField')),
        matching: find.byType(TextField),
      );

      // Initial state
      TextField textField = tester.widget<TextField>(textFieldFinder);
      bool initiallyObscured = textField.obscureText;
      addTestResult(
        'Password Field',
        'Initial Visibility',
        'Check initial password field state',
        'Password should be obscured',
        initiallyObscured ? 'Password is obscured' : 'Password is visible',
        initiallyObscured
      );

      // Toggle visibility
      await tester.tap(find.byIcon(Icons.visibility_off).first);
      await tester.pumpAndSettle();
      textField = tester.widget<TextField>(textFieldFinder);
      bool toggledState = !textField.obscureText;
      addTestResult(
        'Password Field',
        'Toggle Visibility',
        'Tap visibility toggle button',
        'Password visibility should toggle',
        toggledState ? 'Password was toggled to visible' : 'Password was toggled to obscured',
        toggledState
      );
    });

    testWidgets('validates form input', (WidgetTester tester) async {
      tester.binding.window.physicalSizeTestValue = const Size(800, 1600);
      tester.binding.window.devicePixelRatioTestValue = 1.0;
      addTearDown(tester.binding.window.clearPhysicalSizeTestValue);

      await tester.pumpWidget(MaterialApp(home: SignUp()));

      var invalidInputs = {
        'firstNameField': {'input': '123', 'error': 'Please enter a valid name'},
        'lastNameField': {'input': '456', 'error': 'Please enter a valid name'},
        'userNameField': {'input': 'u', 'error': 'Please enter a valid username'},
        'emailField': {'input': 'invalid-email', 'error': 'Please enter a valid email'},
        'passwordField': {'input': 'weak', 'error': 'Must be at least 8 characters'},
        'confirmPasswordField': {'input': 'different', 'error': 'Passwords do not match'}
      };

      for (var field in invalidInputs.entries) {
        await tester.enterText(find.byKey(Key(field.key)), field.value['input']!);
        addTestResult(
          'Form Validation',
          'Invalid Input',
          'Enter invalid input in ${field.key}',
          'Should accept input',
          'Input entered successfully',
          true
        );
      }

      await tester.ensureVisible(find.text('Sign Up'));
      await tester.pumpAndSettle();
      await tester.tap(find.text('Sign Up'));
      await tester.pumpAndSettle();

      for (var field in invalidInputs.entries) {
        bool errorFound = find.text(field.value['error']!).evaluate().isNotEmpty;
        addTestResult(
          'Form Validation',
          'Error Message',
          'Check error message for ${field.key}',
          'Should show error message',
          errorFound ? 'Error message displayed' : 'Error message not found',
          errorFound
        );
      }
    });

    testWidgets('navigates to Login screen on tapping Login button', (WidgetTester tester) async {
      await tester.pumpWidget(MaterialApp(home: SignUp()));
      await tester.ensureVisible(find.byKey(Key('loginButton')));
      await tester.pumpAndSettle();
      await tester.tap(find.byKey(Key('loginButton')));
      await tester.pumpAndSettle();

      bool navigated = find.byType(Login).evaluate().isNotEmpty;
      addTestResult(
        'Navigation',
        'Login Navigation',
        'Tap login button',
        'Should navigate to login screen',
        navigated ? 'Navigation successful' : 'Navigation failed',
        navigated
      );
    });
  });

  tearDownAll(() {
    final latex = File('widget_test_results.tex');
    final latexContent = '''
\\begin{table*}[t]
\\centering
\\caption{Signup Screen Widget Test Results}
\\label{tab:signup_screen_widget}
\\begin{tabular}{|p{2.5cm}|p{2.5cm}|p{3cm}|p{3cm}|p{3cm}|p{1cm}|}
\\hline
\\textbf{Category} & \\textbf{Test Case} & \\textbf{Action} & \\textbf{Expected Behavior} & \\textbf{Actual Behavior} & \\textbf{Status} \\\\ \\hline
${testResults.map((r) => r.toLatexRow()).join('\n')}
\\end{tabular}
\\end{table*}
''';
    latex.writeAsStringSync(latexContent);

    // Print summary
    final totalTests = testResults.length;
    final passedTests = testResults.where((r) => r.status == 'Pass').length;
    print('\nWidget Test Summary:');
    print('Total Tests: $totalTests');
    print('Passed: $passedTests');
    print('Failed: ${totalTests - passedTests}');
    print('Success Rate: ${(passedTests / totalTests * 100).toStringAsFixed(2)}%');
  });
}

================
File: .gitignore
================
# Miscellaneous
*.class
*.log
*.pyc
*.swp
.DS_Store
.atom/
.buildlog/
.history
.svn/
migrate_working_dir/

# IntelliJ related
*.iml
*.ipr
*.iws
.idea/

# The .vscode folder contains launch configuration and tasks you configure in
# VS Code which you may wish to be included in version control, so this line
# is commented out by default.
#.vscode/

# Flutter/Dart/Pub related
**/doc/api/
**/ios/Flutter/.last_build_id
.dart_tool/
.flutter-plugins
.flutter-plugins-dependencies
.pub-cache/
.pub/
/build/

# Symbolication related
app.*.symbols

# Obfuscation related
app.*.map.json

# Android Studio will place build artifacts here
/android/app/debug
/android/app/profile
/android/app/release
.vscode/
android/
assets/
build/
linux/
macos/
web/
windows/
.dart_tool/
ios/
.dart_tool/

================
File: .metadata
================
# This file tracks properties of this Flutter project.
# Used by Flutter tool to assess capabilities and perform upgrades etc.
#
# This file should be version controlled and should not be manually edited.

version:
  revision: "2663184aa79047d0a33a14a3b607954f8fdd8730"
  channel: "stable"

project_type: app

# Tracks metadata for the flutter migrate command
migration:
  platforms:
    - platform: root
      create_revision: 2663184aa79047d0a33a14a3b607954f8fdd8730
      base_revision: 2663184aa79047d0a33a14a3b607954f8fdd8730
    - platform: android
      create_revision: 2663184aa79047d0a33a14a3b607954f8fdd8730
      base_revision: 2663184aa79047d0a33a14a3b607954f8fdd8730
    - platform: ios
      create_revision: 2663184aa79047d0a33a14a3b607954f8fdd8730
      base_revision: 2663184aa79047d0a33a14a3b607954f8fdd8730
    - platform: linux
      create_revision: 2663184aa79047d0a33a14a3b607954f8fdd8730
      base_revision: 2663184aa79047d0a33a14a3b607954f8fdd8730
    - platform: macos
      create_revision: 2663184aa79047d0a33a14a3b607954f8fdd8730
      base_revision: 2663184aa79047d0a33a14a3b607954f8fdd8730
    - platform: web
      create_revision: 2663184aa79047d0a33a14a3b607954f8fdd8730
      base_revision: 2663184aa79047d0a33a14a3b607954f8fdd8730
    - platform: windows
      create_revision: 2663184aa79047d0a33a14a3b607954f8fdd8730
      base_revision: 2663184aa79047d0a33a14a3b607954f8fdd8730

  # User provided section

  # List of Local paths (relative to this file) that should be
  # ignored by the migrate tool.
  #
  # Files that are not part of the templates will be ignored by default.
  unmanaged_files:
    - 'lib/main.dart'
    - 'ios/Runner.xcodeproj/project.pbxproj'

================
File: analysis_options.yaml
================
# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.
#
# The issues identified by the analyzer are surfaced in the UI of Dart-enabled
# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be
# invoked from the command line by running `flutter analyze`.

# The following line activates a set of recommended lints for Flutter apps,
# packages, and plugins designed to encourage good coding practices.
include: package:flutter_lints/flutter.yaml

linter:
  # The lint rules applied to this project can be customized in the
  # section below to disable rules from the `package:flutter_lints/flutter.yaml`
  # included above or to enable additional rules. A list of all available lints
  # and their documentation is published at https://dart.dev/lints.
  #
  # Instead of disabling a lint rule for the entire project in the
  # section below, it can also be suppressed for a single line of code
  # or a specific dart file by using the `// ignore: name_of_lint` and
  # `// ignore_for_file: name_of_lint` syntax on the line or in the file
  # producing the lint.
  rules:
    # avoid_print: false  # Uncomment to disable the `avoid_print` rule
    # prefer_single_quotes: true  # Uncomment to enable the `prefer_single_quotes` rule

# Additional information about this file can be found at
# https://dart.dev/guides/language/analysis-options

================
File: login_unit_test_results.tex
================
\begin{table*}[t]
\centering
\caption{Login Screen Unit Test Results}
\label{tab:login_screen_unit}
\begin{tabular}{|p{5cm}|p{2.5cm}|p{3cm}|p{3cm}|p{1cm}|}
\hline
\textbf{Test Name} & \textbf{Input} & \textbf{Expected Output} & \textbf{Actual Output} & \textbf{Status} \\ \hline
Username validation: alphanumeric & john123 & null (valid username) & valid & Pass \\ \hline
Username validation: with underscore & user\_name & null (valid username) & valid & Pass \\ \hline
Username validation: alphanumeric & test123 & null (valid username) & valid & Pass \\ \hline
Username validation: alphabetic only & validuser & null (valid username) & valid & Pass \\ \hline
Username validation: mixed characters & a1\_b2 & null (valid username) & valid & Pass \\ \hline
Username validation: empty username & \textit{(empty)} & Please enter a valid username & Please enter a username & Pass \\ \hline
Username validation: too short (min 3) & ab & Please enter a valid username & Please enter a valid username & Pass \\ \hline
Username validation: starts with underscore & \_startswith\_ & Please enter a valid username & Please enter a valid username & Pass \\ \hline
Username validation: ends with underscore & ends\_with\_ & Please enter a valid username & Please enter a valid username & Pass \\ \hline
Username validation: too long (max 15) & very\_long\_username\_123 & Please enter a valid username & Please enter a valid username & Pass \\ \hline
Username validation: special characters & user@name & Please enter a valid username & Please enter a valid username & Pass \\ \hline
Username validation: contains space & user name & Please enter a valid username & Please enter a valid username & Pass \\ \hline
Username validation: null value & null & Please enter a valid username & Please enter a username & Pass \\ \hline
Password validation: simple valid password & password123 & null (valid password) & valid & Pass \\ \hline
Password validation: mixed case password & TestPassword & null (valid password) & valid & Pass \\ \hline
Password validation: complex password & Pass123!@# & null (valid password) & valid & Pass \\ \hline
Password validation: numeric password & 12345678 & null (valid password) & valid & Pass \\ \hline
Password validation: empty password & \textit{(empty)} & Please enter your password & Please enter your password & Pass \\ \hline
Password validation: null password & null & Please enter your password & Please enter your password & Pass \\ \hline
\end{tabular}
\end{table*}

================
File: login_widget_test_results.tex
================
\begin{table*}[t]
\centering
\caption{Login Screen Widget Test Results}
\label{tab:login_screen_widget}
\begin{tabular}{|p{2.5cm}|p{2.5cm}|p{3cm}|p{3cm}|p{3cm}|p{1cm}|}
\hline
\textbf{Category} & \textbf{Test Case} & \textbf{Action} & \textbf{Expected Behavior} & \textbf{Actual Behavior} & \textbf{Status} \\ \hline
UI Rendering & Component Visibility & Render app title & Ramble title should be visible & Title is visible & Pass \\ \hline
UI Rendering & Component Visibility & Render username field & Username field should be visible & Field is visible & Pass \\ \hline
UI Rendering & Component Visibility & Render password field & Password field should be visible & Field is visible & Pass \\ \hline
UI Rendering & Component Visibility & Render login button & Login button should be visible & Button is visible & Pass \\ \hline
Form Validation & Empty Field Validation & Submit empty username & Should show username error & Error shown & Pass \\ \hline
Form Validation & Empty Field Validation & Submit empty password & Should show password error & Error shown & Pass \\ \hline
Form Validation & Username Format & Test invalid username: starts with underscore & Should show format error & Error shown & Pass \\ \hline
Form Validation & Username Format & Test invalid username: too short & Should show format error & Error shown & Pass \\ \hline
Form Validation & Username Format & Test invalid username: too long & Should show format error & Error shown & Pass \\ \hline
Form Validation & Username Format & Test invalid username: special characters & Should show format error & Error shown & Pass \\ \hline
Password Field & Initial Visibility & Check initial password state & Password should be hidden & Password is hidden & Pass \\ \hline
Password Field & Visibility Toggle & Toggle password visibility & Should show visibility icon & Password visible & Pass \\ \hline
\end{tabular}
\end{table*}

================
File: pubspec.lock
================
# Generated by pub
# See https://dart.dev/tools/pub/glossary#lockfile
packages:
  _fe_analyzer_shared:
    dependency: transitive
    description:
      name: _fe_analyzer_shared
      sha256: f256b0c0ba6c7577c15e2e4e114755640a875e885099367bf6e012b19314c834
      url: "https://pub.dev"
    source: hosted
    version: "72.0.0"
  _macros:
    dependency: transitive
    description: dart
    source: sdk
    version: "0.3.2"
  analyzer:
    dependency: transitive
    description:
      name: analyzer
      sha256: b652861553cd3990d8ed361f7979dc6d7053a9ac8843fa73820ab68ce5410139
      url: "https://pub.dev"
    source: hosted
    version: "6.7.0"
  ansicolor:
    dependency: transitive
    description:
      name: ansicolor
      sha256: "50e982d500bc863e1d703448afdbf9e5a72eb48840a4f766fa361ffd6877055f"
      url: "https://pub.dev"
    source: hosted
    version: "2.0.3"
  archive:
    dependency: transitive
    description:
      name: archive
      sha256: cb6a278ef2dbb298455e1a713bda08524a175630ec643a242c399c932a0a1f7d
      url: "https://pub.dev"
    source: hosted
    version: "3.6.1"
  args:
    dependency: transitive
    description:
      name: args
      sha256: "7cf60b9f0cc88203c5a190b4cd62a99feea42759a7fa695010eb5de1c0b2252a"
      url: "https://pub.dev"
    source: hosted
    version: "2.5.0"
  async:
    dependency: transitive
    description:
      name: async
      sha256: "947bfcf187f74dbc5e146c9eb9c0f10c9f8b30743e341481c1e2ed3ecc18c20c"
      url: "https://pub.dev"
    source: hosted
    version: "2.11.0"
  boolean_selector:
    dependency: transitive
    description:
      name: boolean_selector
      sha256: "6cfb5af12253eaf2b368f07bacc5a80d1301a071c73360d746b7f2e32d762c66"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.1"
  build:
    dependency: transitive
    description:
      name: build
      sha256: "80184af8b6cb3e5c1c4ec6d8544d27711700bc3e6d2efad04238c7b5290889f0"
      url: "https://pub.dev"
    source: hosted
    version: "2.4.1"
  build_config:
    dependency: transitive
    description:
      name: build_config
      sha256: bf80fcfb46a29945b423bd9aad884590fb1dc69b330a4d4700cac476af1708d1
      url: "https://pub.dev"
    source: hosted
    version: "1.1.1"
  build_daemon:
    dependency: transitive
    description:
      name: build_daemon
      sha256: "79b2aef6ac2ed00046867ed354c88778c9c0f029df8a20fe10b5436826721ef9"
      url: "https://pub.dev"
    source: hosted
    version: "4.0.2"
  build_resolvers:
    dependency: transitive
    description:
      name: build_resolvers
      sha256: "339086358431fa15d7eca8b6a36e5d783728cf025e559b834f4609a1fcfb7b0a"
      url: "https://pub.dev"
    source: hosted
    version: "2.4.2"
  build_runner:
    dependency: "direct main"
    description:
      name: build_runner
      sha256: "028819cfb90051c6b5440c7e574d1896f8037e3c96cf17aaeb054c9311cfbf4d"
      url: "https://pub.dev"
    source: hosted
    version: "2.4.13"
  build_runner_core:
    dependency: transitive
    description:
      name: build_runner_core
      sha256: f8126682b87a7282a339b871298cc12009cb67109cfa1614d6436fb0289193e0
      url: "https://pub.dev"
    source: hosted
    version: "7.3.2"
  built_collection:
    dependency: transitive
    description:
      name: built_collection
      sha256: "376e3dd27b51ea877c28d525560790aee2e6fbb5f20e2f85d5081027d94e2100"
      url: "https://pub.dev"
    source: hosted
    version: "5.1.1"
  built_value:
    dependency: transitive
    description:
      name: built_value
      sha256: c7913a9737ee4007efedaffc968c049fd0f3d0e49109e778edc10de9426005cb
      url: "https://pub.dev"
    source: hosted
    version: "8.9.2"
  characters:
    dependency: transitive
    description:
      name: characters
      sha256: "04a925763edad70e8443c99234dc3328f442e811f1d8fd1a72f1c8ad0f69a605"
      url: "https://pub.dev"
    source: hosted
    version: "1.3.0"
  checked_yaml:
    dependency: transitive
    description:
      name: checked_yaml
      sha256: feb6bed21949061731a7a75fc5d2aa727cf160b91af9a3e464c5e3a32e28b5ff
      url: "https://pub.dev"
    source: hosted
    version: "2.0.3"
  clock:
    dependency: transitive
    description:
      name: clock
      sha256: cb6d7f03e1de671e34607e909a7213e31d7752be4fb66a86d29fe1eb14bfb5cf
      url: "https://pub.dev"
    source: hosted
    version: "1.1.1"
  code_builder:
    dependency: transitive
    description:
      name: code_builder
      sha256: "0ec10bf4a89e4c613960bf1e8b42c64127021740fb21640c29c909826a5eea3e"
      url: "https://pub.dev"
    source: hosted
    version: "4.10.1"
  collection:
    dependency: transitive
    description:
      name: collection
      sha256: ee67cb0715911d28db6bf4af1026078bd6f0128b07a5f66fb2ed94ec6783c09a
      url: "https://pub.dev"
    source: hosted
    version: "1.18.0"
  convert:
    dependency: transitive
    description:
      name: convert
      sha256: b30acd5944035672bc15c6b7a8b47d773e41e2f17de064350988c5d02adb1c68
      url: "https://pub.dev"
    source: hosted
    version: "3.1.2"
  crypto:
    dependency: transitive
    description:
      name: crypto
      sha256: ec30d999af904f33454ba22ed9a86162b35e52b44ac4807d1d93c288041d7d27
      url: "https://pub.dev"
    source: hosted
    version: "3.0.5"
  csslib:
    dependency: transitive
    description:
      name: csslib
      sha256: "706b5707578e0c1b4b7550f64078f0a0f19dec3f50a178ffae7006b0a9ca58fb"
      url: "https://pub.dev"
    source: hosted
    version: "1.0.0"
  cupertino_icons:
    dependency: "direct main"
    description:
      name: cupertino_icons
      sha256: ba631d1c7f7bef6b729a622b7b752645a2d076dba9976925b8f25725a30e1ee6
      url: "https://pub.dev"
    source: hosted
    version: "1.0.8"
  dart_style:
    dependency: transitive
    description:
      name: dart_style
      sha256: "7856d364b589d1f08986e140938578ed36ed948581fbc3bc9aef1805039ac5ab"
      url: "https://pub.dev"
    source: hosted
    version: "2.3.7"
  fake_async:
    dependency: transitive
    description:
      name: fake_async
      sha256: "511392330127add0b769b75a987850d136345d9227c6b94c96a04cf4a391bf78"
      url: "https://pub.dev"
    source: hosted
    version: "1.3.1"
  ffi:
    dependency: transitive
    description:
      name: ffi
      sha256: "16ed7b077ef01ad6170a3d0c57caa4a112a38d7a2ed5602e0aca9ca6f3d98da6"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.3"
  file:
    dependency: transitive
    description:
      name: file
      sha256: "5fc22d7c25582e38ad9a8515372cd9a93834027aacf1801cf01164dac0ffa08c"
      url: "https://pub.dev"
    source: hosted
    version: "7.0.0"
  fixnum:
    dependency: transitive
    description:
      name: fixnum
      sha256: b6dc7065e46c974bc7c5f143080a6764ec7a4be6da1285ececdc37be96de53be
      url: "https://pub.dev"
    source: hosted
    version: "1.1.1"
  flutter:
    dependency: "direct main"
    description: flutter
    source: sdk
    version: "0.0.0"
  flutter_driver:
    dependency: transitive
    description: flutter
    source: sdk
    version: "0.0.0"
  flutter_lints:
    dependency: "direct dev"
    description:
      name: flutter_lints
      sha256: "3f41d009ba7172d5ff9be5f6e6e6abb4300e263aab8866d2a0842ed2a70f8f0c"
      url: "https://pub.dev"
    source: hosted
    version: "4.0.0"
  flutter_native_splash:
    dependency: "direct main"
    description:
      name: flutter_native_splash
      sha256: aa06fec78de2190f3db4319dd60fdc8d12b2626e93ef9828633928c2dcaea840
      url: "https://pub.dev"
    source: hosted
    version: "2.4.1"
  flutter_test:
    dependency: "direct dev"
    description: flutter
    source: sdk
    version: "0.0.0"
  flutter_web_plugins:
    dependency: transitive
    description: flutter
    source: sdk
    version: "0.0.0"
  frontend_server_client:
    dependency: transitive
    description:
      name: frontend_server_client
      sha256: f64a0333a82f30b0cca061bc3d143813a486dc086b574bfb233b7c1372427694
      url: "https://pub.dev"
    source: hosted
    version: "4.0.0"
  fuchsia_remote_debug_protocol:
    dependency: transitive
    description: flutter
    source: sdk
    version: "0.0.0"
  glob:
    dependency: transitive
    description:
      name: glob
      sha256: "0e7014b3b7d4dac1ca4d6114f82bf1782ee86745b9b42a92c9289c23d8a0ab63"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.2"
  google_fonts:
    dependency: "direct main"
    description:
      name: google_fonts
      sha256: b1ac0fe2832c9cc95e5e88b57d627c5e68c223b9657f4b96e1487aa9098c7b82
      url: "https://pub.dev"
    source: hosted
    version: "6.2.1"
  graphs:
    dependency: transitive
    description:
      name: graphs
      sha256: "741bbf84165310a68ff28fe9e727332eef1407342fca52759cb21ad8177bb8d0"
      url: "https://pub.dev"
    source: hosted
    version: "2.3.2"
  html:
    dependency: transitive
    description:
      name: html
      sha256: "3a7812d5bcd2894edf53dfaf8cd640876cf6cef50a8f238745c8b8120ea74d3a"
      url: "https://pub.dev"
    source: hosted
    version: "0.15.4"
  http:
    dependency: "direct main"
    description:
      name: http
      sha256: b9c29a161230ee03d3ccf545097fccd9b87a5264228c5d348202e0f0c28f9010
      url: "https://pub.dev"
    source: hosted
    version: "1.2.2"
  http_multi_server:
    dependency: transitive
    description:
      name: http_multi_server
      sha256: "97486f20f9c2f7be8f514851703d0119c3596d14ea63227af6f7a481ef2b2f8b"
      url: "https://pub.dev"
    source: hosted
    version: "3.2.1"
  http_parser:
    dependency: transitive
    description:
      name: http_parser
      sha256: "2aa08ce0341cc9b354a498388e30986515406668dbcc4f7c950c3e715496693b"
      url: "https://pub.dev"
    source: hosted
    version: "4.0.2"
  image:
    dependency: transitive
    description:
      name: image
      sha256: "2237616a36c0d69aef7549ab439b833fb7f9fb9fc861af2cc9ac3eedddd69ca8"
      url: "https://pub.dev"
    source: hosted
    version: "4.2.0"
  integration_test:
    dependency: "direct main"
    description: flutter
    source: sdk
    version: "0.0.0"
  intl:
    dependency: "direct main"
    description:
      name: intl
      sha256: "3bc132a9dbce73a7e4a21a17d06e1878839ffbf975568bc875c60537824b0c4d"
      url: "https://pub.dev"
    source: hosted
    version: "0.18.1"
  io:
    dependency: transitive
    description:
      name: io
      sha256: "2ec25704aba361659e10e3e5f5d672068d332fc8ac516421d483a11e5cbd061e"
      url: "https://pub.dev"
    source: hosted
    version: "1.0.4"
  js:
    dependency: transitive
    description:
      name: js
      sha256: c1b2e9b5ea78c45e1a0788d29606ba27dc5f71f019f32ca5140f61ef071838cf
      url: "https://pub.dev"
    source: hosted
    version: "0.7.1"
  json_annotation:
    dependency: transitive
    description:
      name: json_annotation
      sha256: "1ce844379ca14835a50d2f019a3099f419082cfdd231cd86a142af94dd5c6bb1"
      url: "https://pub.dev"
    source: hosted
    version: "4.9.0"
  leak_tracker:
    dependency: transitive
    description:
      name: leak_tracker
      sha256: "3f87a60e8c63aecc975dda1ceedbc8f24de75f09e4856ea27daf8958f2f0ce05"
      url: "https://pub.dev"
    source: hosted
    version: "10.0.5"
  leak_tracker_flutter_testing:
    dependency: transitive
    description:
      name: leak_tracker_flutter_testing
      sha256: "932549fb305594d82d7183ecd9fa93463e9914e1b67cacc34bc40906594a1806"
      url: "https://pub.dev"
    source: hosted
    version: "3.0.5"
  leak_tracker_testing:
    dependency: transitive
    description:
      name: leak_tracker_testing
      sha256: "6ba465d5d76e67ddf503e1161d1f4a6bc42306f9d66ca1e8f079a47290fb06d3"
      url: "https://pub.dev"
    source: hosted
    version: "3.0.1"
  lints:
    dependency: transitive
    description:
      name: lints
      sha256: "976c774dd944a42e83e2467f4cc670daef7eed6295b10b36ae8c85bcbf828235"
      url: "https://pub.dev"
    source: hosted
    version: "4.0.0"
  logging:
    dependency: transitive
    description:
      name: logging
      sha256: c8245ada5f1717ed44271ed1c26b8ce85ca3228fd2ffdb75468ab01979309d61
      url: "https://pub.dev"
    source: hosted
    version: "1.3.0"
  macros:
    dependency: transitive
    description:
      name: macros
      sha256: "0acaed5d6b7eab89f63350bccd82119e6c602df0f391260d0e32b5e23db79536"
      url: "https://pub.dev"
    source: hosted
    version: "0.1.2-main.4"
  matcher:
    dependency: transitive
    description:
      name: matcher
      sha256: d2323aa2060500f906aa31a895b4030b6da3ebdcc5619d14ce1aada65cd161cb
      url: "https://pub.dev"
    source: hosted
    version: "0.12.16+1"
  material_color_utilities:
    dependency: transitive
    description:
      name: material_color_utilities
      sha256: f7142bb1154231d7ea5f96bc7bde4bda2a0945d2806bb11670e30b850d56bdec
      url: "https://pub.dev"
    source: hosted
    version: "0.11.1"
  meta:
    dependency: transitive
    description:
      name: meta
      sha256: bdb68674043280c3428e9ec998512fb681678676b3c54e773629ffe74419f8c7
      url: "https://pub.dev"
    source: hosted
    version: "1.15.0"
  mime:
    dependency: transitive
    description:
      name: mime
      sha256: "41a20518f0cb1256669420fdba0cd90d21561e560ac240f26ef8322e45bb7ed6"
      url: "https://pub.dev"
    source: hosted
    version: "2.0.0"
  mockito:
    dependency: "direct main"
    description:
      name: mockito
      sha256: "6841eed20a7befac0ce07df8116c8b8233ed1f4486a7647c7fc5a02ae6163917"
      url: "https://pub.dev"
    source: hosted
    version: "5.4.4"
  network_image_mock:
    dependency: "direct main"
    description:
      name: network_image_mock
      sha256: "855cdd01d42440e0cffee0d6c2370909fc31b3bcba308a59829f24f64be42db7"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.1"
  package_config:
    dependency: transitive
    description:
      name: package_config
      sha256: "1c5b77ccc91e4823a5af61ee74e6b972db1ef98c2ff5a18d3161c982a55448bd"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.0"
  path:
    dependency: transitive
    description:
      name: path
      sha256: "087ce49c3f0dc39180befefc60fdb4acd8f8620e5682fe2476afd0b3688bb4af"
      url: "https://pub.dev"
    source: hosted
    version: "1.9.0"
  path_provider:
    dependency: transitive
    description:
      name: path_provider
      sha256: fec0d61223fba3154d87759e3cc27fe2c8dc498f6386c6d6fc80d1afdd1bf378
      url: "https://pub.dev"
    source: hosted
    version: "2.1.4"
  path_provider_android:
    dependency: transitive
    description:
      name: path_provider_android
      sha256: c464428172cb986b758c6d1724c603097febb8fb855aa265aeecc9280c294d4a
      url: "https://pub.dev"
    source: hosted
    version: "2.2.12"
  path_provider_foundation:
    dependency: transitive
    description:
      name: path_provider_foundation
      sha256: f234384a3fdd67f989b4d54a5d73ca2a6c422fa55ae694381ae0f4375cd1ea16
      url: "https://pub.dev"
    source: hosted
    version: "2.4.0"
  path_provider_linux:
    dependency: transitive
    description:
      name: path_provider_linux
      sha256: f7a1fe3a634fe7734c8d3f2766ad746ae2a2884abe22e241a8b301bf5cac3279
      url: "https://pub.dev"
    source: hosted
    version: "2.2.1"
  path_provider_platform_interface:
    dependency: transitive
    description:
      name: path_provider_platform_interface
      sha256: "88f5779f72ba699763fa3a3b06aa4bf6de76c8e5de842cf6f29e2e06476c2334"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.2"
  path_provider_windows:
    dependency: transitive
    description:
      name: path_provider_windows
      sha256: bd6f00dbd873bfb70d0761682da2b3a2c2fccc2b9e84c495821639601d81afe7
      url: "https://pub.dev"
    source: hosted
    version: "2.3.0"
  petitparser:
    dependency: transitive
    description:
      name: petitparser
      sha256: c15605cd28af66339f8eb6fbe0e541bfe2d1b72d5825efc6598f3e0a31b9ad27
      url: "https://pub.dev"
    source: hosted
    version: "6.0.2"
  platform:
    dependency: transitive
    description:
      name: platform
      sha256: "9b71283fc13df574056616011fb138fd3b793ea47cc509c189a6c3fa5f8a1a65"
      url: "https://pub.dev"
    source: hosted
    version: "3.1.5"
  plugin_platform_interface:
    dependency: transitive
    description:
      name: plugin_platform_interface
      sha256: "4820fbfdb9478b1ebae27888254d445073732dae3d6ea81f0b7e06d5dedc3f02"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.8"
  pool:
    dependency: transitive
    description:
      name: pool
      sha256: "20fe868b6314b322ea036ba325e6fc0711a22948856475e2c2b6306e8ab39c2a"
      url: "https://pub.dev"
    source: hosted
    version: "1.5.1"
  process:
    dependency: transitive
    description:
      name: process
      sha256: "21e54fd2faf1b5bdd5102afd25012184a6793927648ea81eea80552ac9405b32"
      url: "https://pub.dev"
    source: hosted
    version: "5.0.2"
  pub_semver:
    dependency: transitive
    description:
      name: pub_semver
      sha256: "40d3ab1bbd474c4c2328c91e3a7df8c6dd629b79ece4c4bd04bee496a224fb0c"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.4"
  pubspec_parse:
    dependency: transitive
    description:
      name: pubspec_parse
      sha256: c799b721d79eb6ee6fa56f00c04b472dcd44a30d258fac2174a6ec57302678f8
      url: "https://pub.dev"
    source: hosted
    version: "1.3.0"
  shared_preferences:
    dependency: "direct main"
    description:
      name: shared_preferences
      sha256: "746e5369a43170c25816cc472ee016d3a66bc13fcf430c0bc41ad7b4b2922051"
      url: "https://pub.dev"
    source: hosted
    version: "2.3.2"
  shared_preferences_android:
    dependency: transitive
    description:
      name: shared_preferences_android
      sha256: "3b9febd815c9ca29c9e3520d50ec32f49157711e143b7a4ca039eb87e8ade5ab"
      url: "https://pub.dev"
    source: hosted
    version: "2.3.3"
  shared_preferences_foundation:
    dependency: transitive
    description:
      name: shared_preferences_foundation
      sha256: "07e050c7cd39bad516f8d64c455f04508d09df104be326d8c02551590a0d513d"
      url: "https://pub.dev"
    source: hosted
    version: "2.5.3"
  shared_preferences_linux:
    dependency: transitive
    description:
      name: shared_preferences_linux
      sha256: "580abfd40f415611503cae30adf626e6656dfb2f0cee8f465ece7b6defb40f2f"
      url: "https://pub.dev"
    source: hosted
    version: "2.4.1"
  shared_preferences_platform_interface:
    dependency: transitive
    description:
      name: shared_preferences_platform_interface
      sha256: "57cbf196c486bc2cf1f02b85784932c6094376284b3ad5779d1b1c6c6a816b80"
      url: "https://pub.dev"
    source: hosted
    version: "2.4.1"
  shared_preferences_web:
    dependency: transitive
    description:
      name: shared_preferences_web
      sha256: d2ca4132d3946fec2184261726b355836a82c33d7d5b67af32692aff18a4684e
      url: "https://pub.dev"
    source: hosted
    version: "2.4.2"
  shared_preferences_windows:
    dependency: transitive
    description:
      name: shared_preferences_windows
      sha256: "94ef0f72b2d71bc3e700e025db3710911bd51a71cefb65cc609dd0d9a982e3c1"
      url: "https://pub.dev"
    source: hosted
    version: "2.4.1"
  shelf:
    dependency: transitive
    description:
      name: shelf
      sha256: ad29c505aee705f41a4d8963641f91ac4cee3c8fad5947e033390a7bd8180fa4
      url: "https://pub.dev"
    source: hosted
    version: "1.4.1"
  shelf_web_socket:
    dependency: transitive
    description:
      name: shelf_web_socket
      sha256: cc36c297b52866d203dbf9332263c94becc2fe0ceaa9681d07b6ef9807023b67
      url: "https://pub.dev"
    source: hosted
    version: "2.0.1"
  sky_engine:
    dependency: transitive
    description: flutter
    source: sdk
    version: "0.0.99"
  source_gen:
    dependency: transitive
    description:
      name: source_gen
      sha256: "14658ba5f669685cd3d63701d01b31ea748310f7ab854e471962670abcf57832"
      url: "https://pub.dev"
    source: hosted
    version: "1.5.0"
  source_span:
    dependency: transitive
    description:
      name: source_span
      sha256: "53e943d4206a5e30df338fd4c6e7a077e02254531b138a15aec3bd143c1a8b3c"
      url: "https://pub.dev"
    source: hosted
    version: "1.10.0"
  stack_trace:
    dependency: transitive
    description:
      name: stack_trace
      sha256: "73713990125a6d93122541237550ee3352a2d84baad52d375a4cad2eb9b7ce0b"
      url: "https://pub.dev"
    source: hosted
    version: "1.11.1"
  stream_channel:
    dependency: transitive
    description:
      name: stream_channel
      sha256: ba2aa5d8cc609d96bbb2899c28934f9e1af5cddbd60a827822ea467161eb54e7
      url: "https://pub.dev"
    source: hosted
    version: "2.1.2"
  stream_transform:
    dependency: transitive
    description:
      name: stream_transform
      sha256: "14a00e794c7c11aa145a170587321aedce29769c08d7f58b1d141da75e3b1c6f"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.0"
  string_scanner:
    dependency: transitive
    description:
      name: string_scanner
      sha256: "556692adab6cfa87322a115640c11f13cb77b3f076ddcc5d6ae3c20242bedcde"
      url: "https://pub.dev"
    source: hosted
    version: "1.2.0"
  sync_http:
    dependency: transitive
    description:
      name: sync_http
      sha256: "7f0cd72eca000d2e026bcd6f990b81d0ca06022ef4e32fb257b30d3d1014a961"
      url: "https://pub.dev"
    source: hosted
    version: "0.3.1"
  term_glyph:
    dependency: transitive
    description:
      name: term_glyph
      sha256: a29248a84fbb7c79282b40b8c72a1209db169a2e0542bce341da992fe1bc7e84
      url: "https://pub.dev"
    source: hosted
    version: "1.2.1"
  test_api:
    dependency: transitive
    description:
      name: test_api
      sha256: "5b8a98dafc4d5c4c9c72d8b31ab2b23fc13422348d2997120294d3bac86b4ddb"
      url: "https://pub.dev"
    source: hosted
    version: "0.7.2"
  timing:
    dependency: transitive
    description:
      name: timing
      sha256: "70a3b636575d4163c477e6de42f247a23b315ae20e86442bebe32d3cabf61c32"
      url: "https://pub.dev"
    source: hosted
    version: "1.0.1"
  typed_data:
    dependency: transitive
    description:
      name: typed_data
      sha256: facc8d6582f16042dd49f2463ff1bd6e2c9ef9f3d5da3d9b087e244a7b564b3c
      url: "https://pub.dev"
    source: hosted
    version: "1.3.2"
  universal_io:
    dependency: transitive
    description:
      name: universal_io
      sha256: "1722b2dcc462b4b2f3ee7d188dad008b6eb4c40bbd03a3de451d82c78bba9aad"
      url: "https://pub.dev"
    source: hosted
    version: "2.2.2"
  vector_math:
    dependency: transitive
    description:
      name: vector_math
      sha256: "80b3257d1492ce4d091729e3a67a60407d227c27241d6927be0130c98e741803"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.4"
  vm_service:
    dependency: transitive
    description:
      name: vm_service
      sha256: "5c5f338a667b4c644744b661f309fb8080bb94b18a7e91ef1dbd343bed00ed6d"
      url: "https://pub.dev"
    source: hosted
    version: "14.2.5"
  watcher:
    dependency: transitive
    description:
      name: watcher
      sha256: "3d2ad6751b3c16cf07c7fca317a1413b3f26530319181b37e3b9039b84fc01d8"
      url: "https://pub.dev"
    source: hosted
    version: "1.1.0"
  web:
    dependency: transitive
    description:
      name: web
      sha256: cd3543bd5798f6ad290ea73d210f423502e71900302dde696f8bff84bf89a1cb
      url: "https://pub.dev"
    source: hosted
    version: "1.1.0"
  web_socket:
    dependency: transitive
    description:
      name: web_socket
      sha256: "3c12d96c0c9a4eec095246debcea7b86c0324f22df69893d538fcc6f1b8cce83"
      url: "https://pub.dev"
    source: hosted
    version: "0.1.6"
  web_socket_channel:
    dependency: transitive
    description:
      name: web_socket_channel
      sha256: "9f187088ed104edd8662ca07af4b124465893caf063ba29758f97af57e61da8f"
      url: "https://pub.dev"
    source: hosted
    version: "3.0.1"
  webdriver:
    dependency: transitive
    description:
      name: webdriver
      sha256: "003d7da9519e1e5f329422b36c4dcdf18d7d2978d1ba099ea4e45ba490ed845e"
      url: "https://pub.dev"
    source: hosted
    version: "3.0.3"
  xdg_directories:
    dependency: transitive
    description:
      name: xdg_directories
      sha256: "7a3f37b05d989967cdddcbb571f1ea834867ae2faa29725fd085180e0883aa15"
      url: "https://pub.dev"
    source: hosted
    version: "1.1.0"
  xml:
    dependency: transitive
    description:
      name: xml
      sha256: b015a8ad1c488f66851d762d3090a21c600e479dc75e68328c52774040cf9226
      url: "https://pub.dev"
    source: hosted
    version: "6.5.0"
  yaml:
    dependency: transitive
    description:
      name: yaml
      sha256: "75769501ea3489fca56601ff33454fe45507ea3bfb014161abc3b43ae25989d5"
      url: "https://pub.dev"
    source: hosted
    version: "3.1.2"
sdks:
  dart: ">=3.5.3 <4.0.0"
  flutter: ">=3.24.0"

================
File: pubspec.yaml
================
name: ramble
description: "A new Flutter project."
# The following line prevents the package from being accidentally published to
# pub.dev using `flutter pub publish`. This is preferred for private packages.
publish_to: 'none' # Remove this line if you wish to publish to pub.dev

# The following defines the version and build number for your application.
# A version number is three numbers separated by dots, like 1.2.43
# followed by an optional build number separated by a +.
# Both the version and the builder number may be overridden in flutter
# build by specifying --build-name and --build-number, respectively.
# In Android, build-name is used as versionName while build-number used as versionCode.
# Read more about Android versioning at https://developer.android.com/studio/publish/versioning
# In iOS, build-name is used as CFBundleShortVersionString while build-number is used as CFBundleVersion.
# Read more about iOS versioning at
# https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html
# In Windows, build-name is used as the major, minor, and patch parts
# of the product and file versions while build-number is used as the build suffix.
version: 1.0.0+1

environment:
  sdk: ^3.5.3

# Dependencies specify other packages that your package needs in order to work.
# To automatically upgrade your package dependencies to the latest versions
# consider running `flutter pub upgrade --major-versions`. Alternatively,
# dependencies can be manually updated by changing the version numbers below to
# the latest version available on pub.dev. To see which dependencies have newer
# versions available, run `flutter pub outdated`.
dependencies:
  flutter:
    sdk: flutter


  # The following adds the Cupertino Icons font to your application.
  # Use with the CupertinoIcons class for iOS style icons.
  cupertino_icons: ^1.0.8
  flutter_native_splash: ^2.4.1
  shared_preferences: ^2.0.15
  google_fonts: ^6.2.1
  http: ^1.2.2
  intl: ^0.18.0
  mockito: ^5.4.4
  build_runner: ^2.4.0
  network_image_mock: ^2.1.1
  integration_test:
    sdk: flutter
  

dev_dependencies:
  flutter_test:
    sdk: flutter

  # The "flutter_lints" package below contains a set of recommended lints to
  # encourage good coding practices. The lint set provided by the package is
  # activated in the `analysis_options.yaml` file located at the root of your
  # package. See that file for information about deactivating specific lint
  # rules and activating additional ones.
  flutter_lints: ^4.0.0

# For information on the generic Dart part of this file, see the
# following page: https://dart.dev/tools/pub/pubspec

# The following section is specific to Flutter packages.
flutter:

  # The following line ensures that the Material Icons font is
  # included with your application, so that you can use the icons in
  # the material Icons class.
  uses-material-design: true

  # To add assets to your application, add an assets section, like this:
  assets:
    - assets/images/

  # An image asset can refer to one or more resolution-specific "variants", see
  # https://flutter.dev/to/resolution-aware-images

  # For details regarding adding assets from package dependencies, see
  # https://flutter.dev/to/asset-from-package

  # To add custom fonts to your application, add a fonts section here,
  # in this "flutter" section. Each entry in this list should have a
  # "family" key with the font family name, and a "fonts" key with a
  # list giving the asset and other descriptors for the font. For
  # example:
  # fonts:
  #   - family: Schyler
  #     fonts:
  #       - asset: fonts/Schyler-Regular.ttf
  #       - asset: fonts/Schyler-Italic.ttf
  #         style: italic
  #   - family: Trajan Pro
  #     fonts:
  #       - asset: fonts/TrajanPro.ttf
  #       - asset: fonts/TrajanPro_Bold.ttf
  #         weight: 700
  #
  # For details regarding fonts from package dependencies,
  # see https://flutter.dev/to/font-from-package

flutter_native_splash:
  # This package generates native code to customize Flutter's default white native splash screen
  # with background color and splash image.
  # Customize the parameters below, and run the following command in the terminal:
  # dart run flutter_native_splash:create
  # To restore Flutter's default white splash screen, run the following command in the terminal:
  # dart run flutter_native_splash:remove

  # IMPORTANT NOTE: These parameter do not affect the configuration of Android 12 and later, which
  # handle splash screens differently that prior versions of Android.  Android 12 and later must be
  # configured specifically in the android_12 section below.

  # color or background_image is the only required parameter.  Use color to set the background
  # of your splash screen to a solid color.  Use background_image to set the background of your
  # splash screen to a png image.  This is useful for gradients. The image will be stretch to the
  # size of the app. Only one parameter can be used, color and background_image cannot both be set.
  color: "#42a5f5"
  #background_image: "assets/background.png"

  # Optional parameters are listed below.  To enable a parameter, uncomment the line by removing
  # the leading # character.

  # The image parameter allows you to specify an image used in the splash screen.  It must be a
  # png file and should be sized for 4x pixel density.
  image: assets/images/ramble_logo_light_resized.png

  # The branding property allows you to specify an image used as branding in the splash screen.
  # It must be a png file. It is supported for Android, iOS and the Web.  For Android 12,
  # see the Android 12 section below.
  #branding: assets/dart.png

  # To position the branding image at the bottom of the screen you can use bottom, bottomRight,
  # and bottomLeft. The default values is bottom if not specified or specified something else.
  #branding_mode: bottom
  
  # Set the branding padding from the bottom of the screen.  The default value is 0
  # branding_bottom_padding: 24

  # The color_dark, background_image_dark, image_dark, branding_dark are parameters that set the background
  # and image when the device is in dark mode. If they are not specified, the app will use the
  # parameters from above. If the image_dark parameter is specified, color_dark or
  # background_image_dark must be specified.  color_dark and background_image_dark cannot both be
  # set.
  color_dark: "#2c4b69"
  # background_image_dark: "assets/dark-background.png"
  image_dark: assets/images/ramble_logo_dark_resized.png
  #branding_dark: assets/dart_dark.png

  # From Android 12 onwards, the splash screen is handled differently than in previous versions.
  # Please visit https://developer.android.com/guide/topics/ui/splash-screen
  # Following are specific parameters for Android 12+.
  android_12:
    # The image parameter sets the splash screen icon image.  If this parameter is not specified,
    # the app's launcher icon will be used instead.
    # Please note that the splash screen will be clipped to a circle on the center of the screen.
    # App icon with an icon background: This should be 960×960 pixels, and fit within a circle
    # 640 pixels in diameter.
    # App icon without an icon background: This should be 1152×1152 pixels, and fit within a circle
    # 768 pixels in diameter.
    image: assets/images/ramble_logo_light_resized.png

    # Splash screen background color.
    color: "#FFFFFF"

    # App icon background color.
    #icon_background_color: "#111111"

    # The branding property allows you to specify an image used as branding in the splash screen.
    #branding: assets/dart.png

    # The image_dark, color_dark, icon_background_color_dark, and branding_dark set values that
    # apply when the device is in dark mode. If they are not specified, the app will use the
    # parameters from above.
    image_dark: assets/images/ramble_logo_dark_resized.png
    color_dark: "#3E6EA2"
    #icon_background_color_dark: "#eeeeee"

  # The android, ios and web parameters can be used to disable generating a splash screen on a given
  # platform.
  #android: false
  #ios: false
  #web: false

  # Platform specific images can be specified with the following parameters, which will override
  # the respective parameter.  You may specify all, selected, or none of these parameters:
  #color_android: "#42a5f5"
  #color_dark_android: "#042a49"
  #color_ios: "#42a5f5"
  #color_dark_ios: "#042a49"
  #color_web: "#42a5f5"
  #color_dark_web: "#042a49"
  #image_android: assets/splash-android.png
  #image_dark_android: assets/splash-invert-android.png
  #image_ios: assets/splash-ios.png
  #image_dark_ios: assets/splash-invert-ios.png
  #image_web: assets/splash-web.gif
  #image_dark_web: assets/splash-invert-web.gif
  #background_image_android: "assets/background-android.png"
  #background_image_dark_android: "assets/dark-background-android.png"
  #background_image_ios: "assets/background-ios.png"
  #background_image_dark_ios: "assets/dark-background-ios.png"
  #background_image_web: "assets/background-web.png"
  #background_image_dark_web: "assets/dark-background-web.png"
  #branding_android: assets/brand-android.png
  #branding_bottom_padding_android: 24
  #branding_dark_android: assets/dart_dark-android.png
  #branding_ios: assets/brand-ios.png
  #branding_bottom_padding_ios: 24
  #branding_dark_ios: assets/dart_dark-ios.png
  #branding_web: assets/brand-web.gif
  #branding_dark_web: assets/dart_dark-web.gif

  # The position of the splash image can be set with android_gravity, ios_content_mode, and
  # web_image_mode parameters.  All default to center.
  #
  # android_gravity can be one of the following Android Gravity (see
  # https://developer.android.com/reference/android/view/Gravity): bottom, center,
  # center_horizontal, center_vertical, clip_horizontal, clip_vertical, end, fill, fill_horizontal,
  # fill_vertical, left, right, start, or top.
  #android_gravity: center
  #
  # ios_content_mode can be one of the following iOS UIView.ContentMode (see
  # https://developer.apple.com/documentation/uikit/uiview/contentmode): scaleToFill,
  # scaleAspectFit, scaleAspectFill, center, top, bottom, left, right, topLeft, topRight,
  # bottomLeft, or bottomRight.
  #ios_content_mode: center
  #
  # web_image_mode can be one of the following modes: center, contain, stretch, and cover.
  #web_image_mode: center

  # The screen orientation can be set in Android with the android_screen_orientation parameter.
  # Valid parameters can be found here:
  # https://developer.android.com/guide/topics/manifest/activity-element#screen
  #android_screen_orientation: sensorLandscape

  # To hide the notification bar, use the fullscreen parameter.  Has no effect in web since web
  # has no notification bar.  Defaults to false.
  # NOTE: Unlike Android, iOS will not automatically show the notification bar when the app loads.
  #       To show the notification bar, add the following code to your Flutter app:
  #       WidgetsFlutterBinding.ensureInitialized();
  #       SystemChrome.setEnabledSystemUIMode(SystemUiMode.manual, overlays: [SystemUiOverlay.bottom, SystemUiOverlay.top], );
  #fullscreen: true

  # If you have changed the name(s) of your info.plist file(s), you can specify the filename(s)
  # with the info_plist_files parameter.  Remove only the # characters in the three lines below,
  # do not remove any spaces:
  #info_plist_files:
  #  - 'ios/Runner/Info-Debug.plist'
  #  - 'ios/Runner/Info-Release.plist'

================
File: README.md
================
# ramble

A new Flutter project.

## Getting Started

This project is a starting point for a Flutter application.

A few resources to get you started if this is your first Flutter project:

- [Lab: Write your first Flutter app](https://docs.flutter.dev/get-started/codelab)
- [Cookbook: Useful Flutter samples](https://docs.flutter.dev/cookbook)

For help getting started with Flutter development, view the
[online documentation](https://docs.flutter.dev/), which offers tutorials,
samples, guidance on mobile development, and a full API reference.

================
File: signup_unit_test_results.tex
================
\begin{table*}[t]
\centering
\caption{Signup Screen Unit Test}
\label{tab:signup_screen_unit}
\begin{tabular}{|p{5cm}|p{2.5cm}|p{3cm}|p{3cm}|p{1cm}|}
\hline
\textbf{Test Name} & \textbf{Input} & \textbf{Expected Output} & \textbf{Actual Output} & \textbf{Status} \\ \hline
Username validation: valid username & john123 & Valid username & Valid username & Pass \\ \hline
Username validation: valid username & user\_name & Valid username & Valid username & Pass \\ \hline
Username validation: valid username & test123 & Valid username & Valid username & Pass \\ \hline
Username validation: empty username & \textit{(empty)} & Invalid username & Please enter a username & Pass \\ \hline
Username validation: username too short & ab & Invalid username & Please enter a valid username & Pass \\ \hline
Username validation: invalid start character & \_startswith\_ & Invalid username & Please enter a valid username & Pass \\ \hline
Username validation: username too long & verylongusername123456 & Invalid username & Please enter a valid username & Pass \\ \hline
Username validation: invalid characters & user@name & Invalid username & Please enter a valid username & Pass \\ \hline
Email validation: valid email & test@example.com & Valid email & Valid email & Pass \\ \hline
Email validation: valid email & user.name@domain.co.in & Valid email & Valid email & Pass \\ \hline
Email validation: valid email & user+label@example.com & Valid email & Valid email & Pass \\ \hline
Email validation: empty email & \textit{(empty)} & Invalid email & Please enter your email & Pass \\ \hline
Email validation: missing @ symbol & invalidemail & Invalid email & Please enter a valid email & Pass \\ \hline
Email validation: missing domain & user@ & Invalid email & Please enter a valid email & Pass \\ \hline
Email validation: missing username & @domain.com & Invalid email & Please enter a valid email & Pass \\ \hline
Email validation: invalid domain format & user@.com & Invalid email & Unexpected valid result & Fail \\ \hline
Password validation: valid password & Password123! & Valid password & Valid password & Pass \\ \hline
Password validation: valid password & Test@2023 & Valid password & Valid password & Pass \\ \hline
Password validation: valid password & Complex1!Password & Valid password & Valid password & Pass \\ \hline
Password validation: empty password & \textit{(empty)} & Invalid password & Please enter your password & Pass \\ \hline
Password validation: too short & pass & Invalid password & Must be at least 8 characters & Pass \\ \hline
Password validation: no number or special char & password & Invalid password & Must contain at least one number & Pass \\ \hline
Password validation: no special char & Password1 & Invalid password & Must contain at least 1 special character & Pass \\ \hline
Password validation: no number & Password! & Invalid password & Must contain at least one number & Pass \\ \hline
Password validation: no letter & 12345678! & Invalid password & Must contain at least 1 letter & Pass \\ \hline
Name validation: valid name & John & Valid name & Valid name & Pass \\ \hline
Name validation: valid name & Mary-Jane & Valid name & Valid name & Pass \\ \hline
Name validation: valid name & O'Connor & Valid name & Valid name & Pass \\ \hline
Name validation: empty name & \textit{(empty)} & Invalid name & Please enter your first name & Pass \\ \hline
Name validation: numeric name & 123 & Invalid name & Please enter a valid name & Pass \\ \hline
Name validation: alphanumeric name & John123 & Invalid name & Please enter a valid name & Pass \\ \hline
Name validation: special characters & John@ & Invalid name & Please enter a valid name & Pass \\ \hline
Confirm Password: matching passwords & Password123! & Passwords match & Passwords match & Pass \\ \hline
Confirm Password: different password & Password123 & Passwords do not match & Passwords do not match & Pass \\ \hline
Confirm Password: empty password & \textit{(empty)} & Passwords do not match & Please confirm your password & Pass \\ \hline
Confirm Password: completely different password & DifferentPass123! & Passwords do not match & Passwords do not match & Pass \\ \hline
\end{tabular}
\end{table*}

================
File: signup_widget_test_results.tex
================
\begin{table*}[t]
\centering
\caption{Signup Screen Widget Test Results}
\label{tab:signup_screen_widget}
\begin{tabular}{|p{2.5cm}|p{2.5cm}|p{3cm}|p{3cm}|p{3cm}|p{1cm}|}
\hline
\textbf{Category} & \textbf{Test Case} & \textbf{Action} & \textbf{Expected Behavior} & \textbf{Actual Behavior} & \textbf{Status} \\ \hline
UI Rendering & Component Visibility & Render First name field & Component should be visible & Component is visible & Pass \\ \hline
UI Rendering & Component Visibility & Render Last name field & Component should be visible & Component is visible & Pass \\ \hline
UI Rendering & Component Visibility & Render Username field & Component should be visible & Component is visible & Pass \\ \hline
UI Rendering & Component Visibility & Render Email field & Component should be visible & Component is visible & Pass \\ \hline
UI Rendering & Component Visibility & Render Password field & Component should be visible & Component is visible & Pass \\ \hline
UI Rendering & Component Visibility & Render Confirm password field & Component should be visible & Component is visible & Pass \\ \hline
UI Rendering & Component Visibility & Render Sign up button & Component should be visible & Component is visible & Pass \\ \hline
UI Rendering & Component Visibility & Render Login prompt text & Component should be visible & Component is visible & Pass \\ \hline
UI Rendering & Component Visibility & Render Login link & Component should be visible & Component is visible & Pass \\ \hline
Form Validation & Empty Field Validation & Submit form without First name validation & Should show error message & Error message displayed & Pass \\ \hline
Form Validation & Empty Field Validation & Submit form without Last name validation & Should show error message & Error message displayed & Pass \\ \hline
Form Validation & Empty Field Validation & Submit form without Username validation & Should show error message & Error message displayed & Pass \\ \hline
Form Validation & Empty Field Validation & Submit form without Email validation & Should show error message & Error message displayed & Pass \\ \hline
Form Validation & Empty Field Validation & Submit form without Password validation & Should show error message & Error message displayed & Pass \\ \hline
Password Field & Initial Visibility & Check initial password field state & Password should be obscured & Password is obscured & Pass \\ \hline
Password Field & Toggle Visibility & Tap visibility toggle button & Password visibility should toggle & Password was toggled to visible & Pass \\ \hline
Form Validation & Invalid Input & Enter invalid input in firstNameField & Should accept input & Input entered successfully & Pass \\ \hline
Form Validation & Invalid Input & Enter invalid input in lastNameField & Should accept input & Input entered successfully & Pass \\ \hline
Form Validation & Invalid Input & Enter invalid input in userNameField & Should accept input & Input entered successfully & Pass \\ \hline
Form Validation & Invalid Input & Enter invalid input in emailField & Should accept input & Input entered successfully & Pass \\ \hline
Form Validation & Invalid Input & Enter invalid input in passwordField & Should accept input & Input entered successfully & Pass \\ \hline
Form Validation & Invalid Input & Enter invalid input in confirmPasswordField & Should accept input & Input entered successfully & Pass \\ \hline
Form Validation & Error Message & Check error message for firstNameField & Should show error message & Error message displayed & Pass \\ \hline
Form Validation & Error Message & Check error message for lastNameField & Should show error message & Error message displayed & Pass \\ \hline
Form Validation & Error Message & Check error message for userNameField & Should show error message & Error message displayed & Pass \\ \hline
Form Validation & Error Message & Check error message for emailField & Should show error message & Error message displayed & Pass \\ \hline
Form Validation & Error Message & Check error message for passwordField & Should show error message & Error message displayed & Pass \\ \hline
Form Validation & Error Message & Check error message for confirmPasswordField & Should show error message & Error message displayed & Pass \\ \hline
Navigation & Login Navigation & Tap login button & Should navigate to login screen & Navigation successful & Pass \\ \hline
\end{tabular}
\end{table*}

================
File: test_results.tex
================
\documentclass{article}
\usepackage{longtable}
\begin{document}

\section{Home Screen Unit Test Results}

\begin{longtable}{|p{5cm}|p{2.5cm}|p{3cm}|p{3cm}|p{1cm}|}
\hline
\textbf{Test Name} & \textbf{Input} & \textbf{Expected Output} & \textbf{Actual Output} & \textbf{Status} \\ \hline
likePost: failure & N/A & Post not liked & Post not liked & Pass \\ \hline
unlikePost: failure & N/A & Post not unliked & Post not unliked & Pass \\ \hline
handleLogout: success & N/A & Preferences cleared & Preferences cleared & Pass \\ \hline
\end{longtable}

\end{document}
